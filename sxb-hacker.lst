  Fri Apr 21 2023  0:45                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C265SXB or W65C816SXB
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C),2015-2018 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;-------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                        
    32                                        ifdef   W65C265SXB
    33                                        include "w65c265.inc"
    34                                        else
    35                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  Fri Apr 21 2023  0:45                                                                                                    Page 2


    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;==============================================================================
    33                        ; Status Register Bits
    34                        ;------------------------------------------------------------------------------
    35                        
    36             00000080   N_FLAG          equ     1<<7
    37             00000040   V_FLAG          equ     1<<6
    38             00000020   M_FLAG          equ     1<<5
    39             00000010   X_FLAG          equ     1<<4
    40             00000010   B_FLAG          equ     1<<4
    41             00000008   D_FLAG          equ     1<<3
    42             00000004   I_FLAG          equ     1<<2
    43             00000002   Z_FLAG          equ     1<<1
    44             00000001   C_FLAG          equ     1<<0
    45                        
    46                        ;==============================================================================
    47                        ; Macros
    48                        ;------------------------------------------------------------------------------
    49                        
    50                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    51                        ; is fixed at $0100-$01ff. 
    52                        
    53                        emulate         macro
    54                                        sec
    55                                        xce
    56                                        endm
    57                        
    58                        ; Puts the processor in native mode. The size of the memory and index register
    59                        ; operations is not controlled by the M & X bits in the status register.
    60                        
    61                        native          macro
    62                                        clc
    63                                        xce
    64                                        endm
    65                        
    66                        ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
    67                         
    68                        long_a          macro
    69                                        rep     #M_FLAG
    70                                        longa   on
    71                                        endm
    72                        
    73                        ; Resets the X bit making the index registers 16-bits wide
    74                        
    75                        long_i          macro
  Fri Apr 21 2023  0:45                                                                                                    Page 3


    76                                        rep     #X_FLAG
    77                                        longi   on
    78                                        endm
    79                        
    80                        ; Resets the M and X bits making the accumulator, memory accesses and index
    81                        ; registers 16-bits wide.
    82                                        
    83                        long_ai         macro
    84                                        rep     #M_FLAG|X_FLAG
    85                                        longa   on
    86                                        longi   on
    87                                        endm
    88                        
    89                        ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
    90                        
    91                        short_a         macro
    92                                        sep     #M_FLAG
    93                                        longa   off
    94                                        endm
    95                        
    96                        ; Sets the X bit making the index registers 8-bits wide.
    97                        
    98                        short_i         macro
    99                                        sep     #X_FLAG
   100                                        longi   off
   101                                        endm
   102                                        
   103                        ; Sets the M & X bits making the accumulator, memory accesses and index
   104                        ; registers 8-bits wide.
   105                        
   106                        short_ai        macro
   107                                        sep     #M_FLAG|X_FLAG
   108                                        longa   off
   109                                        longi   off
   110                                        endm
    36                                        endif
    37                        
    38                        ;===============================================================================
    39                        ;-------------------------------------------------------------------------------
    40                        
    41                        MNEM            macro   P,Q,R
    42                                        dw      ((((P-'@')<<5)|(Q-'@'))<<5)|(R-'@')
    43                                        endm
    44                        
    45                        ;===============================================================================
    46                        ; ASCII Character Codes
    47                        ;-------------------------------------------------------------------------------
    48                        
    49             00000001   SOH             equ     $01
    50             00000004   EOT             equ     $04
    51             00000006   ACK             equ     $06
    52             00000007   BEL             equ     $07
    53             00000008   BS              equ     $08
    54             0000000A   LF              equ     $0a
    55             0000000D   CR              equ     $0d
    56             00000015   NAK             equ     $15
    57             00000018   CAN             equ     $18
    58             0000001B   ESC             equ     $1b
  Fri Apr 21 2023  0:45                                                                                                    Page 4


    59             0000007F   DEL             equ     $7f
    60                        
    61                        ;===============================================================================
    62                        ;-------------------------------------------------------------------------------
    63                        
    64             00000000   OP_ADC          equ     0<<1
    65             00000002   OP_AND          equ     1<<1
    66             00000004   OP_ASL          equ     2<<1
    67             00000006   OP_BCC          equ     3<<1
    68             00000008   OP_BCS          equ     4<<1
    69             0000000A   OP_BEQ          equ     5<<1
    70             0000000C   OP_BIT          equ     6<<1
    71             0000000E   OP_BMI          equ     7<<1
    72             00000010   OP_BNE          equ     8<<1
    73             00000012   OP_BPL          equ     9<<1
    74             00000014   OP_BRA          equ     10<<1
    75             00000016   OP_BRK          equ     11<<1
    76             00000018   OP_BRL          equ     12<<1
    77             0000001A   OP_BVC          equ     13<<1
    78             0000001C   OP_BVS          equ     14<<1
    79             0000001E   OP_CLC          equ     15<<1
    80             00000020   OP_CLD          equ     16<<1
    81             00000022   OP_CLI          equ     17<<1
    82             00000024   OP_CLV          equ     18<<1
    83             00000026   OP_CMP          equ     19<<1
    84             00000028   OP_COP          equ     20<<1
    85             0000002A   OP_CPX          equ     21<<1
    86             0000002C   OP_CPY          equ     22<<1
    87             0000002E   OP_DEC          equ     23<<1
    88             00000030   OP_DEX          equ     24<<1
    89             00000032   OP_DEY          equ     25<<1
    90             00000034   OP_EOR          equ     26<<1
    91             00000036   OP_INC          equ     27<<1
    92             00000038   OP_INX          equ     28<<1
    93             0000003A   OP_INY          equ     29<<1
    94             0000003C   OP_JML          equ     30<<1
    95             0000003E   OP_JMP          equ     31<<1
    96             00000040   OP_JSL          equ     32<<1
    97             00000042   OP_JSR          equ     33<<1
    98             00000044   OP_LDA          equ     34<<1
    99             00000046   OP_LDX          equ     35<<1
   100             00000048   OP_LDY          equ     36<<1
   101             0000004A   OP_LSR          equ     37<<1
   102             0000004C   OP_MVN          equ     38<<1
   103             0000004E   OP_MVP          equ     39<<1
   104             00000050   OP_NOP          equ     40<<1
   105             00000052   OP_ORA          equ     41<<1
   106             00000054   OP_PEA          equ     42<<1
   107             00000056   OP_PEI          equ     43<<1
   108             00000058   OP_PER          equ     44<<1
   109             0000005A   OP_PHA          equ     45<<1
   110             0000005C   OP_PHB          equ     46<<1
   111             0000005E   OP_PHD          equ     47<<1
   112             00000060   OP_PHK          equ     48<<1
   113             00000062   OP_PHP          equ     49<<1
   114             00000064   OP_PHX          equ     50<<1
   115             00000066   OP_PHY          equ     51<<1
   116             00000068   OP_PLA          equ     52<<1
  Fri Apr 21 2023  0:45                                                                                                    Page 5


   117             0000006A   OP_PLB          equ     53<<1
   118             0000006C   OP_PLD          equ     54<<1
   119             0000006E   OP_PLP          equ     55<<1
   120             00000070   OP_PLX          equ     56<<1
   121             00000072   OP_PLY          equ     57<<1
   122             00000074   OP_REP          equ     58<<1
   123             00000076   OP_ROL          equ     59<<1
   124             00000078   OP_ROR          equ     60<<1
   125             0000007A   OP_RTI          equ     61<<1
   126             0000007C   OP_RTL          equ     62<<1
   127             0000007E   OP_RTS          equ     63<<1
   128             00000080   OP_SBC          equ     64<<1
   129             00000082   OP_SEC          equ     65<<1
   130             00000084   OP_SED          equ     66<<1
   131             00000086   OP_SEI          equ     67<<1
   132             00000088   OP_SEP          equ     68<<1
   133             0000008A   OP_STA          equ     69<<1
   134             0000008C   OP_STP          equ     70<<1
   135             0000008E   OP_STX          equ     71<<1
   136             00000090   OP_STY          equ     72<<1
   137             00000092   OP_STZ          equ     73<<1
   138             00000094   OP_TAX          equ     74<<1
   139             00000096   OP_TAY          equ     75<<1
   140             00000098   OP_TCD          equ     76<<1
   141             0000009A   OP_TCS          equ     77<<1
   142             0000009C   OP_TDC          equ     78<<1
   143             0000009E   OP_TRB          equ     79<<1
   144             000000A0   OP_TSB          equ     80<<1
   145             000000A2   OP_TSC          equ     81<<1
   146             000000A4   OP_TSX          equ     82<<1
   147             000000A6   OP_TXA          equ     83<<1
   148             000000A8   OP_TXS          equ     84<<1
   149             000000AA   OP_TXY          equ     85<<1
   150             000000AC   OP_TYA          equ     86<<1
   151             000000AE   OP_TYX          equ     87<<1
   152             000000B0   OP_WAI          equ     88<<1
   153             000000B2   OP_WDM          equ     89<<1
   154             000000B4   OP_XBA          equ     90<<1
   155             000000B6   OP_XCE          equ     91<<1
   156                        
   157             00000000   MD_ABS          equ     0<<1                    ; a
   158             00000002   MD_ACC          equ     1<<1                    ; A
   159             00000004   MD_ABX          equ     2<<1                    ; a,x
   160             00000006   MD_ABY          equ     3<<1                    ; a,y
   161             00000008   MD_ALG          equ     4<<1                    ; al
   162             0000000A   MD_ALX          equ     5<<1                    ; al,x
   163             0000000C   MD_AIN          equ     6<<1                    ; (a)
   164             0000000E   MD_AIX          equ     7<<1                    ; (a,x)
   165             00000010   MD_DPG          equ     8<<1                    ; d
   166             00000012   MD_STK          equ     9<<1                    ; d,s
   167             00000014   MD_DPX          equ     10<<1                   ; d,x
   168             00000016   MD_DPY          equ     11<<1                   ; d,x
   169             00000018   MD_DIN          equ     12<<1                   ; (d)
   170             0000001A   MD_DLI          equ     13<<1                   ; [d]
   171             0000001C   MD_SKY          equ     14<<1                   ; (d,s),y
   172             0000001E   MD_DIX          equ     15<<1                   ; (d,x)
   173             00000020   MD_DIY          equ     16<<1                   ; (d),y
   174             00000022   MD_DLY          equ     17<<1                   ; [d],y
  Fri Apr 21 2023  0:45                                                                                                    Page 6


   175             00000024   MD_IMP          equ     18<<1                   ;
   176             00000026   MD_REL          equ     19<<1                   ; r
   177             00000028   MD_RLG          equ     20<<1                   ; rl
   178             0000002A   MD_MOV          equ     21<<1                   ; xyc
   179             0000002C   MD_IMM          equ     22<<1                   ; # (A or M)
   180             0000002E   MD_INT          equ     23<<1                   ; # (BRK/COP/WDM)
   181             00000030   MD_IMX          equ     24<<1                   ; # (X or Y)
   182                        
   183                        ;===============================================================================
   184                        ; Data Areas
   185                        ;-------------------------------------------------------------------------------
   186                        
   187                                        page0
   188                                        org     $20
   189                        
   190 00:0020:              FLAGS           ds      1                       ; Emulated processor flags
   191 00:0021:              BUFLEN          ds      1                       ; Command buffer length
   192 00:0022:              BANK            ds      1                       ; Memory bank
   193                        
   194 00:0023:              ADDR_S          ds      3                       ; Start address
   195 00:0026:              ADDR_E          ds      3                       ; End address
   196                        
   197 00:0029:              BLOCK           ds      1                       ; XMODEM block number
   198 00:002A:              RETRIES         ds      1                       ; Retry count
   199 00:002B:              SUM             ds      1                       ; Checksum
   200                        
   201 00:002C:              TEMP            ds      4                       ; Scratch workspace
   202                        
   203                                        data
   204                                        org     $200
   205                        
   206 00:0200:              BUFFER          ds      128                     ; Command buffer
   207                        
   208                        ;===============================================================================
   209                        ; Initialisation
   210                        ;-------------------------------------------------------------------------------
   211                        
   212                                        code
   213                                        public  Start
   214                                        extern  UartRx
   215                                        extern  UartTx
   216                                        extern  UartRxTest
   217                                        extern  RomSelect
   218                                        extern  RomCheck
   219                        Start:
   220                                        short_a                         ; Configure register sizes
+  220 00:0000: E2 20                        sep     #M_FLAG
+  220                                        longa   off
   221                                        long_i
+  221 00:0002: C2 10                        rep     #X_FLAG
+  221                                        longi   on
   222 00:0004: 20 xx xx                     jsr     TxCRLF
   223 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
   224 00:000A: 20 xx xx                     jsr     TxStr
   225                        
   226 00:000D: 64 22                        stz     BANK                    ; Reset default bank
   227                        
   228                        ;===============================================================================
  Fri Apr 21 2023  0:45                                                                                                    Page 7


   229                        ; Command Processor
   230                        ;-------------------------------------------------------------------------------
   231                        
   232                        NewCommand:
   233 00:000F: 64 21                        stz     BUFLEN                  ; Clear the buffer
   234                        ShowCommand:
   235                                        short_i
+  235 00:0011: E2 10                        sep     #X_FLAG
+  235                                        longi   off
   236 00:0013: 20 xx xx                     jsr     TxCRLF                  ; Move to a new line
   237                        
   238 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   239 00:0018: 20 xx xx                     jsr     UartTx
   240                        
   241 00:001B: A2 00                        ldx     #0
   242 00:001D: E4 21        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   243 00:001F: F0 0E                        beq     ReadCommand
   244 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   245 00:0024: 20 xx xx                     jsr     UartTx
   246 00:0027: E8                           inx
   247 00:0028: 80 F3                        bra     DisplayCmd
   248                        
   249                        RingBell:
   250 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   251 00:002C: 20 xx xx                     jsr     UartTx
   252                        
   253                        ReadCommand:
   254 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   255                        
   256 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   257 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   258 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   259 00:0038: F0 2D                        beq     ProcessCommand          ; Yes, start processing
   260                        
   261 00:003A: C9 08                        cmp     #BS                     ; Back space?
   262 00:003C: F0 15                        beq     BackSpace
   263 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   264 00:0040: F0 11                        beq     BackSpace
   265                        
   266 00:0042: C9 20                        cmp     #' '                    ; Printable character
   267 00:0044: 90 E4                        bcc     RingBell                ; No.
   268 00:0046: C9 7F                        cmp     #DEL
   269 00:0048: B0 E0                        bcs     RingBell                ; No.
   270 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save the character
   271 00:004D: E8                           inx
   272 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   273 00:0051: 80 DC                        bra     ReadCommand
   274                        
   275                        BackSpace:
   276 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   277 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
   278 00:0057: CA                           dex                             ; No, remove last character
   279 00:0058: A9 08                        lda     #BS
   280 00:005A: 20 xx xx                     jsr     UartTx
   281 00:005D: 20 xx xx                     jsr     TxSpace
   282 00:0060: A9 08                        lda     #BS
   283 00:0062: 20 xx xx                     jsr     UartTx
   284 00:0065: 80 C8                        bra     ReadCommand             ; And retry
  Fri Apr 21 2023  0:45                                                                                                    Page 8


   285                        
   286                        ProcessCommand:
   287 00:0067: 86 21                        stx     BUFLEN                  ; Save final length
   288 00:0069: A0 00                        ldy     #0                      ; Load index for start
   289                        
   290 00:006B: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   291 00:006E: B0 9F                        bcs     NewCommand              ; None, empty command
   292                        
   293                        ;===============================================================================
   294                        ; B - Select Memory Bank
   295                        ;-------------------------------------------------------------------------------
   296                        
   297 00:0070: C9 42                        cmp     #'B'                    ; Select memory bank?
   298 00:0072: D0 0D                        bne     NotMemoryBank
   299                        
   300 00:0074: A2 22                        ldx     #BANK                   ; Parse bank
   301 00:0076: 20 xx xx                     jsr     GetByte
   302 00:0079: 90 03                        bcc     $+5
   303 00:007B: 4C xx xx                     jmp     ShowError
   304 00:007E: 4C xx xx                     jmp     NewCommand
   305                        NotMemoryBank:
   306                        
   307                        ;===============================================================================
   308                        ; D - Disassemble Memory
   309                        ;-------------------------------------------------------------------------------
   310                        
   311 00:0081: C9 44                        cmp     #'D'                    ; Memory display?
   312 00:0083: D0 78                        bne     NotDisassemble
   313                        
   314 00:0085: A2 23                        ldx     #ADDR_S                 ; Parse start address
   315 00:0087: 20 xx xx                     jsr     GetAddr
   316 00:008A: 90 03                        bcc     $+5
   317 00:008C: 4C xx xx                     jmp     ShowError
   318 00:008F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   319 00:0091: 20 xx xx                     jsr     GetAddr
   320 00:0094: 90 03                        bcc     $+5
   321 00:0096: 4C xx xx                     jmp     ShowError
   322                        
   323 00:0099: 08                           php
   324 00:009A: 68                           pla
   325 00:009B: 85 20                        sta     FLAGS
   326                        
   327                        Disassemble:
   328 00:009D: 20 xx xx                     jsr     TxCRLF
   329 00:00A0: A5 25                        lda     ADDR_S+2                ; Show memory address
   330 00:00A2: 20 xx xx                     jsr     TxHex2
   331 00:00A5: A9 3A                        lda     #':'
   332 00:00A7: 20 xx xx                     jsr     UartTx
   333 00:00AA: A5 24                        lda     ADDR_S+1
   334 00:00AC: 20 xx xx                     jsr     TxHex2
   335 00:00AF: A5 23                        lda     ADDR_S+0
   336 00:00B1: 20 xx xx                     jsr     TxHex2
   337 00:00B4: 20 xx xx                     jsr     TxSpace
   338                        
   339 00:00B7: 20 xx xx                     jsr     TxCodeBytes             ; Show code bytes
   340 00:00BA: 20 xx xx                     jsr     TxSymbolic              ; And instruction
   341                        
   342 00:00BD: A7 23                        lda     [ADDR_S]                ; Fetch opcode again
  Fri Apr 21 2023  0:45                                                                                                    Page 9


   343 00:00BF: 48                           pha
   344 00:00C0: A0 01                        ldy     #1
   345                        
   346 00:00C2: C9 18                        cmp     #$18                    ; CLC?
   347 00:00C4: D0 04                        bne     NotCLC
   348 00:00C6: A9 01                        lda     #C_FLAG
   349 00:00C8: 80 0E                        bra     DoREP
   350                        NotCLC:
   351 00:00CA: C9 38                        cmp     #$38                    ; SEC?
   352 00:00CC: D0 04                        bne     NotSEC
   353 00:00CE: A9 01                        lda     #C_FLAG
   354 00:00D0: 80 10                        bra     DoSEP
   355                        NotSEC:
   356 00:00D2: C9 C2                        cmp     #$c2                    ; REP?
   357 00:00D4: D0 06                        bne     NotREP
   358 00:00D6: B7 23                        lda     [ADDR_S],Y
   359 00:00D8: 14 20        DoREP:          trb     FLAGS
   360 00:00DA: 80 08                        bra     NextOpcode
   361                        NotREP:
   362 00:00DC: C9 E2                        cmp     #$e2                    ; SEP?
   363 00:00DE: D0 04                        bne     NextOpcode
   364 00:00E0: B7 23                        lda     [ADDR_S],Y
   365 00:00E2: 04 20        DoSEP:          tsb     FLAGS
   366                        
   367                        NextOpcode:
   368 00:00E4: 68                           pla
   369 00:00E5: 20 xx xx                     jsr     OpcodeSize
   370                        
   371 00:00E8: 18                           clc
   372 00:00E9: 65 23                        adc     ADDR_S+0                ; And move start address on
   373 00:00EB: 85 23                        sta     ADDR_S+0
   374 00:00ED: 90 02                        bcc     $+4
   375 00:00EF: E6 24                        inc     ADDR_S+1
   376                        
   377 00:00F1: 38                           sec                             ; Exceeded the end address?
   378 00:00F2: E5 26                        sbc     ADDR_E+0
   379 00:00F4: A5 24                        lda     ADDR_S+1
   380 00:00F6: E5 27                        sbc     ADDR_E+1
   381 00:00F8: 30 A3                        bmi     Disassemble             ; No, show more
   382                        
   383 00:00FA: 4C xx xx                     jmp     NewCommand              ; Done
   384                        NotDisassemble:
   385                        
   386                        ;===============================================================================
   387                        ; E - Erase ROM bank
   388                        ;-------------------------------------------------------------------------------
   389                        
   390 00:00FD: C9 45                        cmp     #'E'                    ; Erase bank?
   391 00:00FF: D0 72                        bne     NotEraseBank
   392                        
   393 00:0101: 20 xx xx                     jsr     CheckSafe
   394                        
   395                                        ifdef   W65C265SXB
   396                                        lda     BCR                     ; Save mask rom state
   397                                        pha
   398                                        lda     #$80                    ; Then ensure disabled
   399                                        tsb     BCR
   400                                        endif
  Fri Apr 21 2023  0:45                                                                                                    Page 10


   401                        
   402 00:0104: A2 23                        ldx     #ADDR_S                 ; Parse optional start address
   403 00:0106: 20 xx xx                     jsr     GetAddr
   404 00:0109: 90 08                        bcc     SkipStartAddrInit
   405                        
   406 00:010B: A9 00                        lda     #$00                    ; Set default start address
   407 00:010D: 85 23                        sta     ADDR_S+0
   408 00:010F: A9 80                        lda     #$80
   409 00:0111: 85 24                        sta     ADDR_S+1
   410                        
   411                        SkipStartAddrInit:
   412                        
   413 00:0113: A2 26                        ldx     #ADDR_E                 ; Parse optional end address
   414 00:0115: 20 xx xx                     jsr     GetAddr
   415 00:0118: 90 08                        bcc     SkipEndAddrInit
   416                        
   417 00:011A: A9 FF                        lda     #$FF                    ; Set default end address
   418 00:011C: 85 26                        sta     ADDR_E+0
   419 00:011E: A9 FF                        lda     #$FF
   420 00:0120: 85 27                        sta     ADDR_E+1
   421                        
   422                        SkipEndAddrInit:
   423                        
   424 00:0122: A5 24                        lda     ADDR_S+1                ; Ensure start is within ROM
   425 00:0124: 30 03                        bmi     $+5
   426 00:0126: 4C xx xx                     jmp     ShowError
   427                        
   428 00:0129: A5 27                        lda     ADDR_E+1                ; Ensure end  is within ROM
   429 00:012B: 30 03                        bmi     $+5
   430 00:012D: 4C xx xx                     jmp     ShowError
   431                        
   432 00:0130: A5 24                        lda     ADDR_S+1                ; Clip the starting address
   433 00:0132: 29 F0                        and     #$F0
   434 00:0134: 85 24                        sta     ADDR_S+1
   435                        
   436                        EraseLoop:
   437                        
   438 00:0136: A9 AA                        lda     #$aa                    ; Unlock flash
   439 00:0138: 8D 55 D5                     sta     $8000+$5555
   440 00:013B: A9 55                        lda     #$55
   441 00:013D: 8D AA AA                     sta     $8000+$2aaa
   442 00:0140: A9 80                        lda     #$80                    ; Signal erase
   443 00:0142: 8D 55 D5                     sta     $8000+$5555
   444 00:0145: A9 AA                        lda     #$aa
   445 00:0147: 8D 55 D5                     sta     $8000+$5555
   446 00:014A: A9 55                        lda     #$55
   447 00:014C: 8D AA AA                     sta     $8000+$2aaa
   448 00:014F: A9 30                        lda     #$30                    ; Sector erase
   449 00:0151: 92 23                        sta     (ADDR_S)
   450                        
   451                        EraseWait:
   452 00:0153: B2 23                        lda     (ADDR_S)                ; Wait for erase to finish
   453 00:0155: C9 FF                        cmp     #$FF
   454 00:0157: D0 FA                        bne     EraseWait
   455                        
   456 00:0159: 18                           clc                             ; Move to next sector
   457 00:015A: A5 24                        lda     ADDR_S+1
   458 00:015C: 69 10                        adc     #$10
  Fri Apr 21 2023  0:45                                                                                                    Page 11


   459 00:015E: 85 24                        sta     ADDR_S+1
   460                        
   461 00:0160: 18                           clc                             ; Clear C to include the end
   462 00:0161: E5 27                        sbc     ADDR_E+1                ; addr in the range to erase.
   463                        
   464 00:0163: 30 D1                        bmi     EraseLoop               ; Repeat until complete
   465                        
   466                                        ifdef   W65C265SXB
   467                                        pla                             ; Restore mask ROM state
   468                                        sta     BCR
   469                                        endif
   470                        
   471 00:0165: 4C xx xx                     jmp     NewCommand              ; And start over
   472                        
   473                        EraseFailed:
   474                                        long_i                          ; Warn that erase failed
+  474 00:0168: C2 10                        rep     #X_FLAG
+  474                                        longi   on
   475 00:016A: A2 xx xx                     ldx     #ERASE_FAILED
   476 00:016D: 20 xx xx                     jsr     TxStr
   477                                        longi   off
   478 00:0170: 4C xx xx                     jmp     NewCommand              ; And start over
   479                        NotEraseBank:
   480                        
   481                        ;===============================================================================
   482                        ; F - WDC Mask ROM Enable/Disable
   483                        ;-------------------------------------------------------------------------------
   484                        
   485                                        ifdef   W65C265SXB
   486                                        cmp     #'F'
   487                                        bne     NotMaskROM
   488                        
   489                                        jsr     SkipSpaces              ; Find first argument
   490                                        bcs     MaskFail                ; Success?
   491                        
   492                                        cmp     #'0'                    ; Check bank is 0..3
   493                                        beq     MaskOff
   494                                        cmp     #'1'
   495                                        beq     MaskOn
   496                        MaskFail:
   497                                        jmp     ShowError
   498                        
   499                        MaskOn:
   500                                        lda     #$80                    ; Enable mask ROM
   501                                        trb     BCR
   502                                        jmp     NewCommand
   503                        
   504                        MaskOff:
   505                                        lda     #$80                    ; Disable mask ROM
   506                                        tsb     BCR
   507                                        jmp     NewCommand
   508                        
   509                        NotMaskROM:
   510                                        endif
   511                        
   512                        ;===============================================================================
   513                        ; G - Goto
   514                        ;-------------------------------------------------------------------------------
  Fri Apr 21 2023  0:45                                                                                                    Page 12


   515                        
   516 00:0173: C9 47                        cmp     #'G'                    ; Invoke code
   517 00:0175: D0 0D                        bne     NotGoto
   518                        
   519 00:0177: A2 23                        ldx     #ADDR_S                 ; Parse execution address
   520 00:0179: 20 xx xx                     jsr     GetAddr
   521 00:017C: B0 03                        bcs     $+5
   522 00:017E: DC 23 00                     jmp     [ADDR_S]                ; Run from address
   523 00:0181: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
   524                        NotGoto:
   525                        
   526                        ;===============================================================================
   527                        ; H - Hunt for RAM
   528                        ;-------------------------------------------------------------------------------
   529                        
   530 00:0184: C9 48                        cmp     #'H'                    ; Hunt for RAM
   531 00:0186: F0 03                        beq     $+5
   532 00:0188: 4C xx xx                     jmp     NotHunt
   533                        
   534 00:018B: 64 23                        stz     ADDR_S+0                ; Start at $00:0000
   535 00:018D: 64 24                        stz     ADDR_S+1
   536 00:018F: 64 25                        stz     ADDR_S+2
   537                        
   538                        HuntStart:
   539 00:0191: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   540 00:0193: 48                           pha
   541 00:0194: 49 FF                        eor     #$ff
   542 00:0196: 87 23                        sta     [ADDR_S]
   543 00:0198: C7 23                        cmp     [ADDR_S]
   544 00:019A: F0 11                        beq     HuntFound               ; Yes
   545                        
   546 00:019C: 68                           pla
   547 00:019D: 18                           clc                             ; Try the next block
   548 00:019E: A5 24                        lda     ADDR_S+1
   549 00:01A0: 69 10                        adc     #$10
   550 00:01A2: 85 24                        sta     ADDR_S+1
   551 00:01A4: 90 EB                        bcc     HuntStart
   552 00:01A6: E6 25                        inc     ADDR_S+2
   553 00:01A8: D0 E7                        bne     HuntStart
   554 00:01AA: 4C xx xx                     jmp     NewCommand              ; Reached end of RAM
   555                        
   556                        HuntFound:
   557 00:01AD: 20 xx xx                     jsr     TxCRLF
   558 00:01B0: A5 25                        lda     ADDR_S+2                ; Print start address
   559 00:01B2: 20 xx xx                     jsr     TxHex2
   560 00:01B5: A9 3A                        lda     #':'
   561 00:01B7: 20 xx xx                     jsr     UartTx
   562 00:01BA: A5 24                        lda     ADDR_S+1
   563 00:01BC: 20 xx xx                     jsr     TxHex2
   564 00:01BF: A5 23                        lda     ADDR_S+0
   565 00:01C1: 20 xx xx                     jsr     TxHex2
   566                        
   567 00:01C4: A9 2D                        lda     #'-'
   568 00:01C6: 20 xx xx                     jsr     UartTx
   569                        
   570                        HuntEnd:
   571 00:01C9: 68                           pla                             ; Restore memory bytes
   572 00:01CA: 87 23                        sta     [ADDR_S]
  Fri Apr 21 2023  0:45                                                                                                    Page 13


   573 00:01CC: 18                           clc                             ; Try the next block
   574 00:01CD: A5 24                        lda     ADDR_S+1
   575 00:01CF: 69 10                        adc     #$10
   576 00:01D1: 85 24                        sta     ADDR_S+1
   577 00:01D3: 90 04                        bcc     HuntNext
   578 00:01D5: E6 25                        inc     ADDR_S+2
   579 00:01D7: F0 2D                        beq     HuntDone
   580                        
   581                        HuntNext
   582 00:01D9: A7 23                        lda     [ADDR_S]                ; Is byte is writeable?
   583 00:01DB: 48                           pha
   584 00:01DC: 49 FF                        eor     #$ff
   585 00:01DE: 87 23                        sta     [ADDR_S]
   586 00:01E0: C7 23                        cmp     [ADDR_S]
   587 00:01E2: F0 E5                        beq     HuntEnd                 ; Yes, keep looking
   588                        
   589 00:01E4: 68                           pla
   590 00:01E5: 38                           sec                             ; Print end address
   591 00:01E6: A5 23                        lda     ADDR_S+0
   592 00:01E8: E9 01                        sbc     #1
   593 00:01EA: 48                           pha
   594 00:01EB: A5 24                        lda     ADDR_S+1
   595 00:01ED: E9 00                        sbc     #0
   596 00:01EF: 48                           pha
   597 00:01F0: A5 25                        lda     ADDR_S+2
   598 00:01F2: E9 00                        sbc     #0
   599 00:01F4: 20 xx xx                     jsr     TxHex2
   600 00:01F7: A9 3A                        lda     #':'
   601 00:01F9: 20 xx xx                     jsr     UartTx
   602 00:01FC: 68                           pla
   603 00:01FD: 20 xx xx                     jsr     TxHex2
   604 00:0200: 68                           pla
   605 00:0201: 20 xx xx                     jsr     TxHex2
   606 00:0204: 80 8B                        bra     HuntStart
   607                        
   608                        HuntDone:
   609 00:0206: A9 FF                        lda     #$ff                    ; Pring FF:FFFF
   610 00:0208: 48                           pha
   611 00:0209: 48                           pha
   612 00:020A: 20 xx xx                     jsr     TxHex2
   613 00:020D: A9 3A                        lda     #':'
   614 00:020F: 20 xx xx                     jsr     UartTx
   615 00:0212: 68                           pla
   616 00:0213: 20 xx xx                     jsr     TxHex2
   617 00:0216: 68                           pla
   618 00:0217: 20 xx xx                     jsr     TxHex2
   619 00:021A: 4C xx xx                     jmp     NewCommand
   620                        NotHunt:
   621                        
   622                        ;===============================================================================
   623                        ; M - Display Memory
   624                        ;-------------------------------------------------------------------------------
   625                        
   626 00:021D: C9 4D                        cmp     #'M'                    ; Memory display?
   627 00:021F: D0 70                        bne     NotMemoryDisplay
   628                        
   629 00:0221: A2 23                        ldx     #ADDR_S                 ; Parse start address
   630 00:0223: 20 xx xx                     jsr     GetAddr
  Fri Apr 21 2023  0:45                                                                                                    Page 14


   631 00:0226: 90 03                        bcc     $+5
   632 00:0228: 4C xx xx                     jmp     ShowError
   633 00:022B: A2 26                        ldx     #ADDR_E                 ; Parse end address
   634 00:022D: 20 xx xx                     jsr     GetAddr
   635 00:0230: 90 03                        bcc     $+5
   636 00:0232: 4C xx xx                     jmp     ShowError
   637                        
   638                        DisplayMemory:
   639 00:0235: 20 xx xx                     jsr     TxCRLF
   640 00:0238: A5 25                        lda     ADDR_S+2                ; Show memory address
   641 00:023A: 20 xx xx                     jsr     TxHex2
   642 00:023D: A9 3A                        lda     #':'
   643 00:023F: 20 xx xx                     jsr     UartTx
   644 00:0242: A5 24                        lda     ADDR_S+1
   645 00:0244: 20 xx xx                     jsr     TxHex2
   646 00:0247: A5 23                        lda     ADDR_S+0
   647 00:0249: 20 xx xx                     jsr     TxHex2
   648                        
   649 00:024C: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   650 00:024E: 20 xx xx     ByteLoop:       jsr     TxSpace
   651 00:0251: B7 23                        lda     [ADDR_S],y
   652 00:0253: 20 xx xx                     jsr     TxHex2
   653 00:0256: C8                           iny
   654 00:0257: C0 10                        cpy     #16
   655 00:0259: D0 F3                        bne     ByteLoop
   656                        
   657 00:025B: 20 xx xx                     jsr     TxSpace
   658 00:025E: A9 7C                        lda     #'|'
   659 00:0260: 20 xx xx                     jsr     UartTx
   660 00:0263: A0 00                        ldy     #0                      ; Show sixteen characters
   661 00:0265: B7 23        CharLoop:       lda     [ADDR_S],Y
   662 00:0267: 20 xx xx                     jsr     IsPrintable
   663 00:026A: B0 02                        bcs     $+4
   664 00:026C: A9 2E                        lda     #'.'
   665 00:026E: 20 xx xx                     jsr     UartTx
   666 00:0271: C8                           iny
   667 00:0272: C0 10                        cpy     #16
   668 00:0274: D0 EF                        bne     CharLoop
   669 00:0276: A9 7C                        lda     #'|'
   670 00:0278: 20 xx xx                     jsr     UartTx
   671                        
   672 00:027B: 18                           clc                             ; Bump the display address
   673 00:027C: 98                           tya
   674 00:027D: 65 23                        adc     ADDR_S+0
   675 00:027F: 85 23                        sta     ADDR_S+0
   676 00:0281: 90 02                        bcc     $+4
   677 00:0283: E6 24                        inc     ADDR_S+1
   678                        
   679 00:0285: 38                           sec                             ; Exceeded the end address?
   680 00:0286: E5 26                        sbc     ADDR_E+0
   681 00:0288: A5 24                        lda     ADDR_S+1
   682 00:028A: E5 27                        sbc     ADDR_E+1
   683 00:028C: 30 A7                        bmi     DisplayMemory           ; No, show more
   684                        
   685 00:028E: 4C xx xx                     jmp     NewCommand
   686                        NotMemoryDisplay:
   687                        
   688                        ;===============================================================================
  Fri Apr 21 2023  0:45                                                                                                    Page 15


   689                        ; R - Select ROM Bank
   690                        ;-------------------------------------------------------------------------------
   691                        
   692 00:0291: C9 52                        cmp     #'R'                    ; ROM Bank?
   693 00:0293: D0 16                        bne     NotROMBank              ; No
   694                        
   695 00:0295: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   696 00:0298: 90 03                        bcc     $+5                     ; Success?
   697 00:029A: 4C xx xx     BankFail:       jmp     ShowError               ; No
   698                        
   699 00:029D: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   700 00:029F: 90 F9                        bcc     BankFail
   701 00:02A1: C9 34                        cmp     #'3'+1
   702 00:02A3: B0 F5                        bcs     BankFail
   703                        
   704 00:02A5: 20 xx xx                     jsr     RomSelect               ; Switch ROM banks
   705 00:02A8: 4C xx xx                     jmp     NewCommand              ; Done
   706                        NotROMBank:
   707                        
   708                        ;===============================================================================
   709                        ; S - S19 Record
   710                        ;-------------------------------------------------------------------------------
   711                        
   712 00:02AB: C9 53                        cmp     #'S'                    ; S19?
   713 00:02AD: F0 03                        beq     $+5
   714 00:02AF: 4C xx xx                     jmp     NotS19
   715                        
   716 00:02B2: 20 xx xx                     jsr     NextChar                ; Get record type
   717 00:02B5: B0 73                        bcs     S19Fail
   718 00:02B7: C9 31                        cmp     #'1'                    ; Only process type 1
   719 00:02B9: D0 6C                        bne     S19Done
   720                        
   721 00:02BB: A2 26                        ldx     #ADDR_E                 ; Get byte count
   722 00:02BD: 20 xx xx                     jsr     GetByte
   723 00:02C0: B0 68                        bcs     S19Fail
   724 00:02C2: A5 26                        lda     ADDR_E                  ; Use as initial checksum
   725 00:02C4: 85 2B                        sta     SUM
   726                                        ; Byte count not included in the S19 byte count field
   727 00:02C6: F0 62                        beq     S19Fail
   728                        
   729 00:02C8: A2 23                        ldx     #ADDR_S                 ; Get address
   730 00:02CA: 20 xx xx                     jsr     GetAddr
   731 00:02CD: B0 5B                        bcs     S19Fail
   732 00:02CF: A5 23                        lda     ADDR_S+0                ; Add to checksum
   733 00:02D1: 65 24                        adc     ADDR_S+1
   734 00:02D3: 18                           clc
   735 00:02D4: 65 2B                        adc     SUM
   736 00:02D6: 85 2B                        sta     SUM
   737 00:02D8: C6 26                        dec     ADDR_E
   738 00:02DA: F0 4E                        beq     S19Fail
   739 00:02DC: C6 26                        dec     ADDR_E
   740 00:02DE: F0 4A                        beq     S19Fail
   741                        
   742                        S19Load:
   743 00:02E0: A2 2C                        ldx     #TEMP                   ; Fetch a data byte
   744 00:02E2: 20 xx xx                     jsr     GetByte
   745 00:02E5: B0 43                        bcs     S19Fail
   746 00:02E7: A5 2C                        lda     TEMP
  Fri Apr 21 2023  0:45                                                                                                    Page 16


   747 00:02E9: 65 2B                        adc     SUM
   748 00:02EB: 85 2B                        sta     SUM
   749 00:02ED: C6 26                        dec     ADDR_E
   750 00:02EF: F0 39                        beq     S19Fail
   751                        
   752 00:02F1: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   753 00:02F3: D0 13                        bne     WriteS19                ; No
   754 00:02F5: A5 24                        lda     ADDR_S+1
   755 00:02F7: 10 0F                        bpl     WriteS19                ; No
   756                        
   757                                        ifdef   W65C265SXB
   758                                        cmp     #$df                    ; Register page?
   759                                        beq     NoWrite
   760                                        endif
   761                        
   762 00:02F9: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   763 00:02FB: 8D 55 D5                     sta     $8000+$5555
   764 00:02FE: A9 55                        lda     #$55
   765 00:0300: 8D AA AA                     sta     $8000+$2aaa
   766 00:0303: A9 A0                        lda     #$a0                    ; Start byte write
   767 00:0305: 8D 55 D5                     sta     $8000+$5555
   768                        WriteS19:
   769 00:0308: A5 2C                        lda     TEMP                    ; Write the value
   770 00:030A: 87 23                        sta     [ADDR_S]
   771                        
   772                        NoWrite:
   773 00:030C: E6 23                        inc     ADDR_S+0                ; Bump address by one
   774 00:030E: D0 02                        bne     $+4
   775 00:0310: E6 24                        inc     ADDR_S+1
   776                        
   777 00:0312: A5 26                        lda     ADDR_E                  ; Reached checksum?
   778 00:0314: C9 01                        cmp     #1
   779 00:0316: D0 C8                        bne     S19Load
   780                        
   781 00:0318: A2 2C                        ldx     #TEMP                   ; Yes, read it
   782 00:031A: 20 xx xx                     jsr     GetByte
   783 00:031D: B0 0B                        bcs     S19Fail
   784 00:031F: A5 2C                        lda     TEMP
   785 00:0321: 65 2B                        adc     SUM
   786 00:0323: C9 FF                        cmp     #$ff                    ; Checksum correct?
   787 00:0325: D0 03                        bne     S19Fail
   788                        
   789 00:0327: 4C xx xx     S19Done:        jmp     NewCommand              ; Get
   790                        
   791                        S19Fail:
   792                                        long_i                          ; Display error message
+  792 00:032A: C2 10                        rep     #X_FLAG
+  792                                        longi   on
   793 00:032C: A2 xx xx                     ldx     #INVALID_S19
   794 00:032F: 20 xx xx                     jsr     TxStr
   795                                        longi   off
   796 00:0332: 4C xx xx                     jmp     NewCommand              ; And start over
   797                        NotS19:
   798                        
   799                        ;===============================================================================
   800                        ; W - Write memory
   801                        ;-------------------------------------------------------------------------------
   802                        
  Fri Apr 21 2023  0:45                                                                                                    Page 17


   803 00:0335: C9 57                        cmp     #'W'                    ; Write memory?
   804 00:0337: D0 58                        bne     NotWrite
   805                        
   806 00:0339: A2 23                        ldx     #ADDR_S                 ; Parse start address
   807 00:033B: 20 xx xx                     jsr     GetAddr
   808 00:033E: 90 03                        bcc     $+5
   809 00:0340: 4C xx xx                     jmp     ShowError
   810                        
   811 00:0343: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   812 00:0345: 10 03                        bpl     $+5
   813 00:0347: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   814                        
   815 00:034A: A2 26                        ldx     #ADDR_E                 ; Parse value byte
   816 00:034C: 20 xx xx                     jsr     GetByte                 ; Is there a value?
   817 00:034F: 90 03                        bcc     $+5
   818 00:0351: 4C xx xx                     jmp     NewCommand              ; No.
   819                        
   820 00:0354: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   821 00:0356: D0 13                        bne     WriteMemory             ; No
   822 00:0358: 24 24                        bit     ADDR_S+1
   823 00:035A: 10 0F                        bpl     WriteMemory             ; No
   824                        
   825 00:035C: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   826 00:035E: 8D 55 D5                     sta     $8000+$5555
   827 00:0361: A9 55                        lda     #$55
   828 00:0363: 8D AA AA                     sta     $8000+$2aaa
   829 00:0366: A9 A0                        lda     #$a0                    ; Start byte write
   830 00:0368: 8D 55 D5                     sta     $8000+$5555
   831                        WriteMemory:
   832 00:036B: A5 26                        lda     ADDR_E                  ; Write the value
   833 00:036D: 87 23                        sta     [ADDR_S]
   834                        
   835 00:036F: E6 23                        inc     ADDR_S+0                ; Bump address by one
   836 00:0371: D0 02                        bne     $+4
   837 00:0373: E6 24                        inc     ADDR_S+1
   838                        
   839 00:0375: A9 57                        lda     #'W'                    ; Build command for next byte
   840 00:0377: 20 xx xx                     jsr     StartCommand
   841 00:037A: A9 20                        lda     #' '
   842 00:037C: 20 xx xx                     jsr     BuildCommand
   843 00:037F: A5 24                        lda     ADDR_S+1                ; Add the next address
   844 00:0381: 20 xx xx                     jsr     BuildByte
   845 00:0384: A5 23                        lda     ADDR_S+0
   846 00:0386: 20 xx xx                     jsr     BuildByte
   847 00:0389: A9 20                        lda     #' '
   848 00:038B: 20 xx xx                     jsr     BuildCommand
   849 00:038E: 4C xx xx                     jmp     ShowCommand             ; And prompt for data
   850                        
   851                        NotWrite:
   852                        
   853                        ;===============================================================================
   854                        ; X - XMODEM Receive
   855                        ;-------------------------------------------------------------------------------
   856                        
   857 00:0391: C9 58                        cmp     #'X'                    ; XModem upload?
   858 00:0393: F0 03                        beq     $+5                     ; Yes.
   859 00:0395: 4C xx xx                     jmp     NotXModem
   860                        
  Fri Apr 21 2023  0:45                                                                                                    Page 18


   861 00:0398: A2 23                        ldx     #ADDR_S                 ; Parse start address
   862 00:039A: 20 xx xx                     jsr     GetAddr
   863 00:039D: 90 03                        bcc     $+5
   864 00:039F: 4C xx xx                     jmp     ShowError
   865                        
   866 00:03A2: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   867 00:03A4: 10 03                        bpl     $+5
   868 00:03A6: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   869                        
   870                                        long_i                          ; Display waiting message
+  870 00:03A9: C2 10                        rep     #X_FLAG
+  870                                        longi   on
   871 00:03AB: A2 xx xx                     ldx     #WAITING
   872 00:03AE: 20 xx xx                     jsr     TxStr
   873 00:03B1: 20 xx xx                     jsr     TxCRLF
   874                                        short_i
+  874 00:03B4: E2 10                        sep     #X_FLAG
+  874                                        longi   off
   875 00:03B6: 64 29                        stz     BLOCK                   ; Reset the block number
   876 00:03B8: E6 29                        inc     BLOCK
   877                        
   878                        ResetRetries:
   879 00:03BA: A9 0A                        lda     #10                     ; Reset the retry counter
   880 00:03BC: 85 2A                        sta     RETRIES
   881                        
   882                        TransferWait:
   883 00:03BE: 64 2C                        stz     TEMP+0                  ; Clear timeout counter
   884 00:03C0: 64 2D                        stz     TEMP+1
   885 00:03C2: A9 EC                        lda     #-20
   886 00:03C4: 85 2E                        sta     TEMP+2
   887                        TransferPoll:
   888 00:03C6: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   889 00:03C9: B0 20                        bcs     TransferScan
   890 00:03CB: E6 2C                        inc     TEMP+0
   891 00:03CD: D0 F7                        bne     TransferPoll
   892 00:03CF: E6 2D                        inc     TEMP+1
   893 00:03D1: D0 F3                        bne     TransferPoll
   894 00:03D3: E6 2E                        inc     TEMP+2
   895 00:03D5: D0 EF                        bne     TransferPoll
   896 00:03D7: C6 2A                        dec     RETRIES
   897 00:03D9: F0 05                        beq     TimedOut
   898 00:03DB: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   899 00:03DE: 80 DE                        bra     TransferWait
   900                        
   901                        TimedOut:
   902                                        long_i
+  902 00:03E0: C2 10                        rep     #X_FLAG
+  902                                        longi   on
   903 00:03E2: A2 xx xx                     ldx     #TIMEOUT
   904 00:03E5: 20 xx xx                     jsr     TxStr
   905                                        longi   off
   906 00:03E8: 4C xx xx                     jmp     NewCommand
   907                        
   908                        TransferScan:
   909 00:03EB: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   910 00:03EE: C9 04                        cmp     #EOT
   911 00:03F0: F0 66                        beq     TransferDone
   912 00:03F2: C9 01                        cmp     #SOH
  Fri Apr 21 2023  0:45                                                                                                    Page 19


   913 00:03F4: D0 C8                        bne     TransferWait
   914 00:03F6: 20 xx xx                     jsr     UartRx                  ; Check the block number
   915 00:03F9: C5 29                        cmp     BLOCK
   916 00:03FB: D0 55                        bne     TransferError
   917 00:03FD: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   918 00:0400: 49 FF                        eor     #$ff
   919 00:0402: C5 29                        cmp     BLOCK
   920 00:0404: D0 4C                        bne     TransferError
   921                        
   922 00:0406: A0 00                        ldy     #0
   923 00:0408: 84 2B                        sty     SUM                     ; Clear the check sum
   924                        TransferBlock:
   925 00:040A: 20 xx xx                     jsr     UartRx
   926 00:040D: 48                           pha
   927                        
   928 00:040E: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   929 00:0410: D0 13                        bne     WriteByte               ; No
   930 00:0412: A5 24                        lda     ADDR_S+1
   931 00:0414: 10 0F                        bpl     WriteByte               ; No
   932                        
   933                                        ifdef   W65C265SXB
   934                                        cmp     #$df                    ; Register page?
   935                                        beq     WriteSkip
   936                                        endif
   937                        
   938 00:0416: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   939 00:0418: 8D 55 D5                     sta     $8000+$5555
   940 00:041B: A9 55                        lda     #$55
   941 00:041D: 8D AA AA                     sta     $8000+$2aaa
   942 00:0420: A9 A0                        lda     #$a0                    ; Start byte write
   943 00:0422: 8D 55 D5                     sta     $8000+$5555
   944                        
   945                        WriteByte:
   946 00:0425: 68                           pla
   947 00:0426: 97 23                        sta     [ADDR_S],Y
   948                        
   949                        WriteWait:
   950 00:0428: D7 23                        cmp     [ADDR_S],Y              ; Wait for write
   951 00:042A: D0 FC                        bne     WriteWait
   952 00:042C: 80 01                        bra     $+3
   953                        
   954                        WriteSkip:
   955 00:042E: 68                           pla
   956                        
   957 00:042F: 18                           clc                             ; Add to check sum
   958 00:0430: 65 2B                        adc     SUM
   959 00:0432: 85 2B                        sta     SUM
   960 00:0434: C8                           iny
   961 00:0435: C0 80                        cpy     #128
   962 00:0437: D0 D1                        bne     TransferBlock
   963 00:0439: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   964 00:043C: C5 2B                        cmp     SUM
   965 00:043E: D0 12                        bne     TransferError           ; Failed
   966 00:0440: 18                           clc
   967 00:0441: 98                           tya
   968 00:0442: 65 23                        adc     ADDR_S+0                ; Bump address one block
   969 00:0444: 85 23                        sta     ADDR_S+0
   970 00:0446: 90 02                        bcc     $+4
  Fri Apr 21 2023  0:45                                                                                                    Page 20


   971 00:0448: E6 24                        inc     ADDR_S+1
   972                        
   973 00:044A: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   974 00:044D: E6 29                        inc     BLOCK                   ; Bump block number
   975 00:044F: 4C xx xx                     jmp     TransferWait
   976                        
   977                        TransferError;
   978 00:0452: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   979 00:0455: 4C xx xx                     jmp     TransferWait            ; And try again
   980                        
   981                        TransferDone:
   982 00:0458: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   983 00:045B: 4C xx xx                     jmp     NewCommand              ; Done
   984                        
   985                        SendACK:
   986 00:045E: A9 06                        lda     #ACK
   987 00:0460: 4C xx xx                     jmp     UartTx
   988                        
   989                        SendNAK:
   990 00:0463: A9 15                        lda     #NAK
   991 00:0465: 4C xx xx                     jmp     UartTx
   992                        
   993                        NotXModem:
   994                        
   995                        ;===============================================================================
   996                        ; ? - Help
   997                        ;-------------------------------------------------------------------------------
   998                        
   999 00:0468: C9 3F                        cmp     #'?'                    ; Help command?
  1000 00:046A: D0 0B                        bne     NotHelp
  1001                        
  1002                                        long_i
+ 1002 00:046C: C2 10                        rep     #X_FLAG
+ 1002                                        longi   on
  1003 00:046E: A2 xx xx                     ldx     #HELP                   ; Output help string
  1004 00:0471: 20 xx xx                     jsr     TxStr
  1005                                        longi   off
  1006 00:0474: 4C xx xx                     jmp     NewCommand
  1007                        NotHelp:
  1008                        
  1009                        ;-------------------------------------------------------------------------------
  1010                        
  1011                        ShowError:
  1012                                        long_i
+ 1012 00:0477: C2 10                        rep     #X_FLAG
+ 1012                                        longi   on
  1013 00:0479: A2 xx xx                     ldx     #ERROR                  ; Output error message
  1014 00:047C: 20 xx xx                     jsr     TxStr
  1015                                        longi   off
  1016 00:047F: 4C xx xx                     jmp     NewCommand
  1017                        
  1018                        ;===============================================================================
  1019                        ;-------------------------------------------------------------------------------
  1020                        
  1021                        ; Checks if an expendable ROM bank is currently selected. If the bank with the
  1022                        ; WDC firmware is selected then warn and accept a new command.
  1023                        
  1024                        CheckSafe:
  Fri Apr 21 2023  0:45                                                                                                    Page 21


  1025 00:0482: 20 xx xx                     jsr     RomCheck                ; WDC ROM selected?
  1026 00:0485: F0 01                        beq     $+3
  1027 00:0487: 60                           rts                             ; No, save to change
  1028                        
  1029 00:0488: 68                           pla                             ; Discard return address
  1030 00:0489: 68                           pla
  1031                                        long_i                          ; Complain about bank
+ 1031 00:048A: C2 10                        rep     #X_FLAG
+ 1031                                        longi   on
  1032 00:048C: A2 xx xx                     ldx     #NOT_SAFE
  1033 00:048F: 20 xx xx                     jsr     TxStr
  1034                                        longi   off
  1035 00:0492: 4C xx xx                     jmp     NewCommand              ; And start over
  1036                        
  1037                        ;===============================================================================
  1038                        ; Byte and Word Parsing
  1039                        ;-------------------------------------------------------------------------------
  1040                        
  1041                        ; Parse a hex byte from the command line and store it at the location indicated
  1042                        ; by the X register.
  1043                        
  1044                        GetByte:
  1045 00:0495: 9E 00 00                     stz     0,x                     ; Set the target address
  1046 00:0498: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
  1047 00:049B: 90 01                        bcc     $+3
  1048 00:049D: 60                           rts                             ; None found
  1049 00:049E: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
  1050 00:04A1: 90 12                        bcc     ByteFail
  1051 00:04A3: 20 xx xx                     jsr     AddDigit
  1052 00:04A6: 20 xx xx                     jsr     NextChar
  1053 00:04A9: B0 08                        bcs     ByteDone
  1054 00:04AB: 20 xx xx                     jsr     IsHexDigit
  1055 00:04AE: 90 03                        bcc     ByteDone
  1056 00:04B0: 20 xx xx                     jsr     AddDigit
  1057 00:04B3: 18           ByteDone:       clc
  1058 00:04B4: 60                           rts
  1059 00:04B5: 38           ByteFail:       sec
  1060 00:04B6: 60                           rts
  1061                        
  1062                        ; Parse an address from the command line and store it at the location indicated
  1063                        ; by the X register.
  1064                        
  1065                        GetAddr:
  1066 00:04B7: 9E 00 00                     stz     0,x                     ; Set the target address
  1067 00:04BA: 9E 01 00                     stz     1,x
  1068 00:04BD: A5 22                        lda     BANK
  1069 00:04BF: 9D 02 00                     sta     2,x
  1070 00:04C2: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
  1071 00:04C5: 90 01                        bcc     $+3
  1072 00:04C7: 60                           rts                             ; None found
  1073                        
  1074 00:04C8: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
  1075 00:04CB: 90 2C                        bcc     AddrFail
  1076 00:04CD: 20 xx xx                     jsr     AddDigit
  1077 00:04D0: 20 xx xx                     jsr     NextChar
  1078 00:04D3: B0 22                        bcs     AddrDone
  1079 00:04D5: 20 xx xx                     jsr     IsHexDigit
  1080 00:04D8: 90 1D                        bcc     AddrDone
  Fri Apr 21 2023  0:45                                                                                                    Page 22


  1081 00:04DA: 20 xx xx                     jsr     AddDigit
  1082 00:04DD: 20 xx xx                     jsr     NextChar
  1083 00:04E0: B0 15                        bcs     AddrDone
  1084 00:04E2: 20 xx xx                     jsr     IsHexDigit
  1085 00:04E5: 90 10                        bcc     AddrDone
  1086 00:04E7: 20 xx xx                     jsr     AddDigit
  1087 00:04EA: 20 xx xx                     jsr     NextChar
  1088 00:04ED: B0 08                        bcs     AddrDone
  1089 00:04EF: 20 xx xx                     jsr     IsHexDigit
  1090 00:04F2: 90 03                        bcc     AddrDone
  1091 00:04F4: 20 xx xx                     jsr     AddDigit
  1092 00:04F7: 18           AddrDone:       clc                             ; Carry clear got an address
  1093 00:04F8: 60                           rts
  1094 00:04F9: 38           AddrFail:       sec                             ; Carry set -- failed.
  1095 00:04FA: 60                           rts
  1096                        
  1097                        ; Add a hex digit to the 16-bit value being build at at the location indicated
  1098                        ; by X.
  1099                        
  1100                        AddDigit:
  1101 00:04FB: 38                           sec                             ; Convert ASCII to binary
  1102 00:04FC: E9 30                        sbc     #'0'
  1103 00:04FE: C9 0A                        cmp     #$0a
  1104 00:0500: 90 02                        bcc     $+4
  1105 00:0502: E9 07                        sbc     #7
  1106                        
  1107 00:0504: 1E 00 00                     asl     0,x                     ; Shift up one nybble
  1108 00:0507: 3E 01 00                     rol     1,x
  1109 00:050A: 1E 00 00                     asl     0,x
  1110 00:050D: 3E 01 00                     rol     1,x
  1111 00:0510: 1E 00 00                     asl     0,x
  1112 00:0513: 3E 01 00                     rol     1,x
  1113 00:0516: 1E 00 00                     asl     0,x
  1114 00:0519: 3E 01 00                     rol     1,x
  1115                        
  1116 00:051C: 1D 00 00                     ora     0,x                     ; Merge in new digit
  1117 00:051F: 9D 00 00                     sta     0,x                     ; .. and save
  1118 00:0522: 60                           rts
  1119                        
  1120                        ;===============================================================================
  1121                        ; Command Line Parsing and Building
  1122                        ;-------------------------------------------------------------------------------
  1123                        
  1124                        ; Get the next character from the command buffer updating the position in X.
  1125                        ; Set the carry if the end of the buffer is reached.
  1126                        
  1127                        NextChar:
  1128 00:0523: C4 21                        cpy     BUFLEN                  ; Any characters left?
  1129 00:0525: 90 01                        bcc     $+3
  1130 00:0527: 60                           rts
  1131 00:0528: B9 00 02                     lda     BUFFER,y
  1132 00:052B: C8                           iny
  1133 00:052C: 4C xx xx                     jmp     ToUpperCase
  1134                        
  1135                        ; Skip over any spaces until a non-space character or the end of the string
  1136                        ; is reached.
  1137                        
  1138                        SkipSpaces:
  Fri Apr 21 2023  0:45                                                                                                    Page 23


  1139 00:052F: 20 xx xx                     jsr     NextChar                ; Fetch next character
  1140 00:0532: 90 01                        bcc     $+3                     ; Any left?
  1141 00:0534: 60                           rts                             ; No
  1142 00:0535: C9 20                        cmp     #' '                    ; Is it a space?
  1143 00:0537: F0 F6                        beq     SkipSpaces              ; Yes, try again
  1144 00:0539: 18                           clc
  1145 00:053A: 60                           rts                             ; Done
  1146                        
  1147                        ; Clear the buffer and the add the command character in A.
  1148                        
  1149                        StartCommand:
  1150 00:053B: 64 21                        stz     BUFLEN                  ; Clear the character count
  1151                        
  1152                        ; Append the character in A to the command being built updating the length.
  1153                        
  1154                        BuildCommand:
  1155 00:053D: A4 21                        ldy     BUFLEN
  1156 00:053F: E6 21                        inc     BUFLEN
  1157 00:0541: 99 00 02                     sta     BUFFER,y
  1158 00:0544: 60                           rts
  1159                        
  1160                        ; Convert the value in A into hex characters and append to the command buffer.
  1161                        
  1162                        BuildByte:
  1163 00:0545: 48                           pha                             ; Save the value
  1164 00:0546: 4A                           lsr     a                       ; Shift MS nybble down
  1165 00:0547: 4A                           lsr     a
  1166 00:0548: 4A                           lsr     a
  1167 00:0549: 4A                           lsr     a
  1168 00:054A: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1169 00:054D: 20 xx xx                     jsr     BuildCommand            ; .. and add to command
  1170 00:0550: 68                           pla                             ; Pull LS nybble
  1171 00:0551: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1172 00:0554: 4C xx xx                     jmp     BuildCommand            ; .. and add to command
  1173                        
  1174                        ;===============================================================================
  1175                        ; Character Classification
  1176                        ;-------------------------------------------------------------------------------
  1177                        
  1178                        ; If the character in MD_ACC is lower case then convert it to upper case.
  1179                        
  1180                        ToUpperCase:
  1181 00:0557: 20 xx xx                     jsr     IsLowerCase             ; Test the character
  1182 00:055A: 90 02                        bcc     $+4
  1183 00:055C: E9 20                        sbc     #32                     ; Convert lower case
  1184 00:055E: 18                           clc
  1185 00:055F: 60                           rts                             ; Done
  1186                        
  1187                        ; Determine if the character in MD_ACC is a lower case letter. Set the carry if it
  1188                        ; is, otherwise clear it.
  1189                        
  1190                                        longa   off
  1191                        IsLowerCase:
  1192 00:0560: C9 61                        cmp     #'a'                    ; Between a and z?
  1193 00:0562: 90 06                        bcc     ClearCarry
  1194 00:0564: C9 7B                        cmp     #'z'+1
  1195 00:0566: B0 02                        bcs     ClearCarry
  1196 00:0568: 38           SetCarry:       sec
  Fri Apr 21 2023  0:45                                                                                                    Page 24


  1197 00:0569: 60                           rts
  1198 00:056A: 18           ClearCarry:     clc
  1199 00:056B: 60                           rts
  1200                        
  1201                        ; Determine if the character in MD_ACC is a hex character. Set the carry if it is,
  1202                        ; otherwise clear it.
  1203                        
  1204                                        longa   off
  1205                        IsHexDigit:
  1206 00:056C: C9 30                        cmp     #'0'                    ; Between 0 and 9?
  1207 00:056E: 90 FA                        bcc     ClearCarry
  1208 00:0570: C9 3A                        cmp     #'9'+1
  1209 00:0572: 90 F4                        bcc     SetCarry
  1210 00:0574: C9 41                        cmp     #'A'                    ; Between MD_ACC and F?
  1211 00:0576: 90 F2                        bcc     ClearCarry
  1212 00:0578: C9 47                        cmp     #'F'+1
  1213 00:057A: 90 EC                        bcc     SetCarry
  1214 00:057C: 80 EC                        bra     ClearCarry
  1215                        
  1216                        ; Determine if the character in MD_ACC is a printable character. Set the carry if it
  1217                        ; is, otherwise clear it.
  1218                        
  1219                                        longa   off
  1220                        IsPrintable:
  1221 00:057E: C9 20                        cmp     #' '
  1222 00:0580: 90 E8                        bcc     ClearCarry
  1223 00:0582: C9 7F                        cmp     #DEL
  1224 00:0584: 90 E2                        bcc     SetCarry
  1225 00:0586: 80 E2                        bra     ClearCarry
  1226                        
  1227                        ;===============================================================================
  1228                        ; Display Utilities
  1229                        ;-------------------------------------------------------------------------------
  1230                        
  1231                        ; Display the value in MD_ACC as two hexadecimal digits.
  1232                        
  1233                        TxHex2:
  1234 00:0588: 48                           pha                             ; Save the original byte
  1235 00:0589: 4A                           lsr     a                       ; Shift down hi nybble
  1236 00:058A: 4A                           lsr     a
  1237 00:058B: 4A                           lsr     a
  1238 00:058C: 4A                           lsr     a
  1239 00:058D: 20 xx xx                     jsr     UartHex                 ; Display
  1240 00:0590: 68                           pla                             ; Recover data byte
  1241                        
  1242                        ; Display the LSB of the value in MD_ACC as a hexadecimal digit using decimal
  1243                        ; arithmetic to do the conversion.
  1244                        
  1245                        UartHex:
  1246 00:0591: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1247 00:0594: 4C xx xx                     jmp     UartTx                  ; And display
  1248                        
  1249                        ; Convert a LSB of the value in MD_ACC to a hexadecimal digit using decimal
  1250                        ; arithmetic.
  1251                        
  1252                        HexToAscii:
  1253 00:0597: 29 0F                        and     #$0f                    ; Strip out lo nybble
  1254 00:0599: F8                           sed                             ; Convert to ASCII
  Fri Apr 21 2023  0:45                                                                                                    Page 25


  1255 00:059A: 18                           clc
  1256 00:059B: 69 90                        adc     #$90
  1257 00:059D: 69 40                        adc     #$40
  1258 00:059F: D8                           cld
  1259 00:05A0: 60                           rts                             ; Done
  1260                        
  1261                        ; Display the string of characters starting a the memory location pointed to by
  1262                        ; X (16-bits).
  1263                        
  1264                                        .longa  off
  1265                                        .longi  on
  1266                        TxStr:
  1267 00:05A1: BD 00 00                     lda     0,x                     ; Fetch the next character
  1268 00:05A4: D0 01                        bne     $+3                     ; Return it end of string
  1269 00:05A6: 60                           rts
  1270 00:05A7: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
  1271 00:05AA: E8                           inx                             ; Bump the pointer
  1272 00:05AB: 80 F4                        bra     TxStr                   ; And repeat
  1273                        
  1274                        ; Display a CR/LF control character sequence.
  1275                        
  1276                        TxCRLF:
  1277 00:05AD: 20 xx xx                     jsr     TxCR                    ; Transmit a CR
  1278 00:05B0: A9 0A                        lda     #LF                     ; Followed by a LF
  1279 00:05B2: 4C xx xx                     jmp     UartTx
  1280                        
  1281                        TxCR:
  1282 00:05B5: A9 0D                        lda     #CR                     ; Transmit a CR
  1283 00:05B7: 4C xx xx                     jmp     UartTx
  1284                        
  1285                        TxSpace:
  1286 00:05BA: A9 20                        lda     #' '                    ; Transmit a space
  1287 00:05BC: 4C xx xx                     jmp     UartTx
  1288                        
  1289                        ;===============================================================================
  1290                        ;-------------------------------------------------------------------------------
  1291                        
  1292                        ;
  1293                        
  1294                                        longa   off
  1295                                        longi   off
  1296                        TxCodeBytes:
  1297 00:05BF: A7 23                        lda     [ADDR_S]                ; Fetch the opcode
  1298 00:05C1: 20 xx xx                     jsr     OpcodeSize              ; and work out its size
  1299 00:05C4: AA                           tax
  1300 00:05C5: A0 00                        ldy     #0                      ; Clear byte count
  1301                        CodeLoop:
  1302 00:05C7: B7 23                        lda     [ADDR_S],Y              ; Fetch a byte of code
  1303 00:05C9: 20 xx xx                     jsr     TxHex2
  1304 00:05CC: 20 xx xx                     jsr     TxSpace
  1305 00:05CF: C8                           iny
  1306 00:05D0: CA                           dex
  1307 00:05D1: D0 F4                        bne     CodeLoop
  1308                        PadLoop:
  1309 00:05D3: C0 04                        cpy     #4                      ; Need to pad out?
  1310 00:05D5: D0 01                        bne     $+3
  1311 00:05D7: 60                           rts
  1312 00:05D8: 20 xx xx                     jsr     TxSpace
  Fri Apr 21 2023  0:45                                                                                                    Page 26


  1313 00:05DB: 20 xx xx                     jsr     TxSpace
  1314 00:05DE: 20 xx xx                     jsr     TxSpace
  1315 00:05E1: C8                           iny
  1316 00:05E2: 80 EF                        bra     PadLoop
  1317                        
  1318                        ;
  1319                        
  1320                                        longa   off
  1321                                        longi   off
  1322                        TxSymbolic:
  1323 00:05E4: A7 23                        lda     [ADDR_S]                ; Fetch opcode
  1324 00:05E6: 48                           pha
  1325 00:05E7: 20 xx xx                     jsr     TxOpcode
  1326 00:05EA: 68                           pla
  1327 00:05EB: 20 xx xx                     jsr     TxOperand
  1328 00:05EE: 60                           rts
  1329                        
  1330                        ;
  1331                        
  1332                                        longa   off
  1333                                        longi   off
  1334                        TxOpcode:
  1335 00:05EF: 08                           php                             ; Save register sizes
  1336 00:05F0: AA                           tax                             ; Work out the mnemonic
  1337 00:05F1: BD xx xx                     lda     OPCODES,x
  1338 00:05F4: AA                           tax
  1339                                        long_a
+ 1339 00:05F5: C2 20                        rep     #M_FLAG
+ 1339                                        longa   on
  1340 00:05F7: BD xx xx                     lda     MNEMONICS,x
  1341                        
  1342 00:05FA: 48                           pha                             ; Save last character
  1343 00:05FB: 4A                           lsr     a                       ; Shift second down
  1344 00:05FC: 4A                           lsr     a
  1345 00:05FD: 4A                           lsr     a
  1346 00:05FE: 4A                           lsr     a
  1347 00:05FF: 4A                           lsr     a
  1348 00:0600: 48                           pha                             ; Save it
  1349 00:0601: 4A                           lsr     a                       ; Shift first down
  1350 00:0602: 4A                           lsr     a
  1351 00:0603: 4A                           lsr     a
  1352 00:0604: 4A                           lsr     a
  1353 00:0605: 4A                           lsr     a
  1354 00:0606: 20 xx xx                     jsr     ExpandMnem              ; Print first
  1355 00:0609: 68                           pla
  1356 00:060A: 20 xx xx                     jsr     ExpandMnem              ; .. second
  1357 00:060D: 68                           pla
  1358 00:060E: 20 xx xx                     jsr     ExpandMnem              ; .. and third
  1359 00:0611: 28                           plp
  1360 00:0612: 20 xx xx                     jsr     TxSpace
  1361 00:0615: 60                           rts
  1362                        
  1363                        ExpandMnem:
  1364 00:0616: 18                           clc
  1365 00:0617: 29 1F 00                     and     #$1f                    ; Expand letter code
  1366 00:061A: 69 40 00                     adc     #'@'
  1367 00:061D: 4C xx xx                     jmp     UartTx
  1368                        
  Fri Apr 21 2023  0:45                                                                                                    Page 27


  1369                        ;
  1370                        
  1371                                        longa   off
  1372                                        longi   off
  1373                        TxOperand:
  1374 00:0620: AA                           tax                             ; Work out addressing mode
  1375 00:0621: BD xx xx                     lda     MODES,x
  1376 00:0624: AA                           tax
  1377 00:0625: 7C xx xx                     jmp     (MODE_SHOW,x)
  1378                        
  1379                        MODE_SHOW:
  1380 00:0628: xx xx                        dw      TxAbsolute              ; a
  1381 00:062A: xx xx                        dw      TxAccumulator           ; A
  1382 00:062C: xx xx                        dw      TxAbsoluteX             ; a,x
  1383 00:062E: xx xx                        dw      TxAbsoluteY             ; a,y
  1384 00:0630: xx xx                        dw      TxLong                  ; al
  1385 00:0632: xx xx                        dw      TxLongX                 ; al,x
  1386 00:0634: xx xx                        dw      TxAbsoluteIndirect      ; (a)
  1387 00:0636: xx xx                        dw      TxAbsoluteXIndirect     ; (a,x)
  1388 00:0638: xx xx                        dw      TxDirect                ; d
  1389 00:063A: xx xx                        dw      TxStack                 ; d,s
  1390 00:063C: xx xx                        dw      TxDirectX               ; d,x
  1391 00:063E: xx xx                        dw      TxDirectY               ; d,y
  1392 00:0640: xx xx                        dw      TxDirectIndirect        ; (d)
  1393 00:0642: xx xx                        dw      TxDirectIndirectLong    ; [d]
  1394 00:0644: xx xx                        dw      TxStackIndirectY        ; (d,s),y
  1395 00:0646: xx xx                        dw      TxDirectXIndirect       ; (d,x)
  1396 00:0648: xx xx                        dw      TxDirectIndirectY       ; (d),y
  1397 00:064A: xx xx                        dw      TxDirectIndirectLongY   ; [d],y
  1398 00:064C: xx xx                        dw      TxImplied               ;
  1399 00:064E: xx xx                        dw      TxRelative              ; r
  1400 00:0650: xx xx                        dw      TxRelativeLong          ; rl
  1401 00:0652: xx xx                        dw      TxMove                  ; xyc
  1402 00:0654: xx xx                        dw      TxImmediateM            ; # (A & M)
  1403 00:0656: xx xx                        dw      TxImmediateByte         ; # (BRK/COP/WDM)
  1404 00:0658: xx xx                        dw      TxImmediateX            ; # (X or Y)
  1405                        
  1406                        
  1407                        TxAccumulator:
  1408 00:065A: A9 41                        lda     #'A'
  1409 00:065C: 4C xx xx                     jmp     UartTx
  1410                        
  1411                        TxImmediateM:
  1412 00:065F: A9 20                        lda     #M_FLAG
  1413 00:0661: 24 20                        bit     FLAGS
  1414 00:0663: F0 2E                        beq     TxImmediateWord
  1415 00:0665: 80 25                        bra     TxImmediateByte
  1416                        
  1417                        TxImmediateX:
  1418 00:0667: A9 10                        lda     #X_FLAG
  1419 00:0669: 24 20                        bit     FLAGS
  1420 00:066B: F0 26                        beq     TxImmediateWord
  1421 00:066D: 80 1D                        bra     TxImmediateByte
  1422                        
  1423                        TxImplied:
  1424 00:066F: 60                           rts
  1425                        
  1426                        TxMove:
  Fri Apr 21 2023  0:45                                                                                                    Page 28


  1427 00:0670: A9 24                        lda     #'$'
  1428 00:0672: 20 xx xx                     jsr     UartTx
  1429 00:0675: A0 01                        ldy     #1
  1430 00:0677: B7 23                        lda     [ADDR_S],Y
  1431 00:0679: 20 xx xx                     jsr     TxHex2
  1432 00:067C: A9 2C                        lda     #','
  1433 00:067E: 20 xx xx                     jsr     UartTx
  1434 00:0681: A9 24                        lda     #'$'
  1435 00:0683: 20 xx xx                     jsr     UartTx
  1436 00:0686: C8                           iny
  1437 00:0687: B7 23                        lda     [ADDR_S],Y
  1438 00:0689: 4C xx xx                     jmp     TxHex2
  1439                        
  1440                        TxImmediateByte:
  1441 00:068C: A9 23                        lda     #'#'
  1442 00:068E: 20 xx xx                     jsr     UartTx
  1443 00:0691: 80 14                        bra     TxDirect
  1444                        
  1445                        TxImmediateWord:
  1446 00:0693: A9 23                        lda     #'#'
  1447 00:0695: 20 xx xx                     jsr     UartTx
  1448 00:0698: 80 33                        bra     TxAbsolute
  1449                        
  1450                        TxStack:
  1451 00:069A: 20 xx xx                     jsr     TxDirect
  1452 00:069D: A9 2C                        lda     #','
  1453 00:069F: 20 xx xx                     jsr     UartTx
  1454 00:06A2: A9 53                        lda     #'S'
  1455 00:06A4: 4C xx xx                     jmp     UartTx
  1456                        
  1457                        TxDirect:
  1458 00:06A7: A9 24                        lda     #'$'
  1459 00:06A9: 20 xx xx                     jsr     UartTx
  1460 00:06AC: A0 01                        ldy     #1
  1461 00:06AE: B7 23                        lda     [ADDR_S],Y
  1462 00:06B0: 4C xx xx                     jmp     TxHex2
  1463                        
  1464                        TxDirectX:
  1465 00:06B3: 20 xx xx                     jsr     TxDirect
  1466 00:06B6: A9 2C        TxX:            lda     #','
  1467 00:06B8: 20 xx xx                     jsr     UartTx
  1468 00:06BB: A9 58                        lda     #'X'
  1469 00:06BD: 4C xx xx                     jmp     UartTx
  1470                        
  1471                        TxDirectY:
  1472 00:06C0: 20 xx xx                     jsr     TxDirect
  1473 00:06C3: A9 2C        TxY:            lda     #','
  1474 00:06C5: 20 xx xx                     jsr     UartTx
  1475 00:06C8: A9 59                        lda     #'Y'
  1476 00:06CA: 4C xx xx                     jmp     UartTx
  1477                        
  1478                        TxAbsolute:
  1479 00:06CD: A9 24                        lda     #'$'
  1480 00:06CF: 20 xx xx                     jsr     UartTx
  1481 00:06D2: A0 02                        ldy     #2
  1482 00:06D4: B7 23                        lda     [ADDR_S],Y
  1483 00:06D6: 20 xx xx                     jsr     TxHex2
  1484 00:06D9: 88                           dey
  Fri Apr 21 2023  0:45                                                                                                    Page 29


  1485 00:06DA: B7 23                        lda     [ADDR_S],Y
  1486 00:06DC: 4C xx xx                     jmp     TxHex2
  1487                        
  1488                        TxAbsoluteX:
  1489 00:06DF: 20 xx xx                     jsr     TxAbsolute
  1490 00:06E2: 80 D2                        bra     TxX
  1491                        
  1492                        TxAbsoluteY:
  1493 00:06E4: 20 xx xx                     jsr     TxAbsolute
  1494 00:06E7: 80 DA                        bra     TxY
  1495                        
  1496                        TxLong:
  1497 00:06E9: A9 24                        lda     #'$'
  1498 00:06EB: 20 xx xx                     jsr     UartTx
  1499 00:06EE: A0 03                        ldy     #3
  1500 00:06F0: B7 23                        lda     [ADDR_S],Y
  1501 00:06F2: 20 xx xx                     jsr     TxHex2
  1502 00:06F5: A9 3A                        lda     #':'
  1503 00:06F7: 20 xx xx                     jsr     UartTx
  1504 00:06FA: 88                           dey
  1505 00:06FB: B7 23                        lda     [ADDR_S],Y
  1506 00:06FD: 20 xx xx                     jsr     TxHex2
  1507 00:0700: 88                           dey
  1508 00:0701: B7 23                        lda     [ADDR_S],Y
  1509 00:0703: 4C xx xx                     jmp     TxHex2
  1510                        
  1511                        TxLongX:
  1512 00:0706: 20 xx xx                     jsr     TxLong
  1513 00:0709: 80 AB                        bra     TxX
  1514                        
  1515                        TxAbsoluteIndirect:
  1516 00:070B: A9 28                        lda     #'('
  1517 00:070D: 20 xx xx                     jsr     UartTx
  1518 00:0710: 20 xx xx                     jsr     TxAbsolute
  1519 00:0713: A9 29                        lda     #')'
  1520 00:0715: 4C xx xx                     jmp     UartTx
  1521                        
  1522                        TxAbsoluteXIndirect:
  1523 00:0718: A9 28                        lda     #'('
  1524 00:071A: 20 xx xx                     jsr     UartTx
  1525 00:071D: 20 xx xx                     jsr     TxAbsoluteX
  1526 00:0720: A9 29                        lda     #')'
  1527 00:0722: 4C xx xx                     jmp     UartTx
  1528                        
  1529                        TxDirectIndirect:
  1530 00:0725: A9 28                        lda     #'('
  1531 00:0727: 20 xx xx                     jsr     UartTx
  1532 00:072A: 20 xx xx                     jsr     TxDirect
  1533 00:072D: A9 29                        lda     #')'
  1534 00:072F: 4C xx xx                     jmp     UartTx
  1535                        
  1536                        TxDirectXIndirect:
  1537 00:0732: A9 28                        lda     #'('
  1538 00:0734: 20 xx xx                     jsr     UartTx
  1539 00:0737: 20 xx xx                     jsr     TxDirectX
  1540 00:073A: A9 29                        lda     #')'
  1541 00:073C: 4C xx xx                     jmp     UartTx
  1542                        
  Fri Apr 21 2023  0:45                                                                                                    Page 30


  1543                        TxDirectIndirectY:
  1544 00:073F: A9 28                        lda     #'('
  1545 00:0741: 20 xx xx                     jsr     UartTx
  1546 00:0744: 20 xx xx                     jsr     TxDirect
  1547 00:0747: A9 29                        lda     #')'
  1548 00:0749: 20 xx xx                     jsr     UartTx
  1549 00:074C: 4C xx xx                     jmp     TxY
  1550                        
  1551                        TxDirectIndirectLong:
  1552 00:074F: A9 5B                        lda     #'['
  1553 00:0751: 20 xx xx                     jsr     UartTx
  1554 00:0754: 20 xx xx                     jsr     TxDirect
  1555 00:0757: A9 5D                        lda     #']'
  1556 00:0759: 4C xx xx                     jmp     UartTx
  1557                        
  1558                        TxDirectIndirectLongY:
  1559 00:075C: 20 xx xx                     jsr     TxDirectIndirectLong
  1560 00:075F: 4C xx xx                     jmp     TxY
  1561                        
  1562                        TxStackIndirectY:
  1563 00:0762: A9 28                        lda     #'('
  1564 00:0764: 20 xx xx                     jsr     UartTx
  1565 00:0767: 20 xx xx                     jsr     TxStack
  1566 00:076A: A9 29                        lda     #')'
  1567 00:076C: 20 xx xx                     jsr     UartTx
  1568 00:076F: 4C xx xx                     jmp     TxY
  1569                        
  1570                        TxRelative:
  1571 00:0772: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1572 00:0774: A5 23                        lda     ADDR_S+0
  1573 00:0776: 18                           clc
  1574 00:0777: 69 02                        adc     #2
  1575 00:0779: 90 01                        bcc     $+3
  1576 00:077B: E8                           inx
  1577                        
  1578 00:077C: 48                           pha                             ; Add relative offset
  1579 00:077D: A0 01                        ldy     #1
  1580 00:077F: B7 23                        lda     [ADDR_S],y
  1581 00:0781: 10 01                        bpl     $+3
  1582 00:0783: CA                           dex
  1583 00:0784: 18                           clc
  1584 00:0785: 63 01                        adc     1,s
  1585 00:0787: 83 01                        sta     1,s
  1586 00:0789: 90 01                        bcc     $+3
  1587 00:078B: E8                           inx
  1588 00:078C: 80 15                        bra     TxAddr
  1589                        
  1590                        TxRelativeLong:
  1591 00:078E: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1592 00:0790: A5 23                        lda     ADDR_S+0
  1593 00:0792: 18                           clc
  1594 00:0793: 69 03                        adc     #3
  1595 00:0795: 90 01                        bcc     $+3
  1596 00:0797: E8                           inx
  1597                        
  1598 00:0798: 18                           clc                             ; Add relative offset
  1599 00:0799: A0 01                        ldy     #1
  1600 00:079B: 77 23                        adc     [ADDR_S],y
  Fri Apr 21 2023  0:45                                                                                                    Page 31


  1601 00:079D: 48                           pha
  1602 00:079E: C8                           iny
  1603 00:079F: 8A                           txa
  1604 00:07A0: 77 23                        adc     [ADDR_S],Y
  1605 00:07A2: AA                           tax
  1606                        
  1607                        TxAddr:
  1608 00:07A3: A9 24                        lda     #'$'                    ; Print address
  1609 00:07A5: 20 xx xx                     jsr     UartTx
  1610 00:07A8: 8A                           txa
  1611 00:07A9: 20 xx xx                     jsr     TxHex2
  1612 00:07AC: 68                           pla
  1613 00:07AD: 4C xx xx                     jmp     TxHex2
  1614                        
  1615                        ;  Returns the size of the opcode in A given the current flag settings.
  1616                        
  1617                                        longa   off
  1618                                        longi   off
  1619                        OpcodeSize:
  1620 00:07B0: AA                           tax                             ; Work out addressing mode
  1621 00:07B1: BD xx xx                     lda     MODES,x
  1622 00:07B4: AA                           tax
  1623 00:07B5: 7C xx xx                     jmp     (MODE_SIZE,x)
  1624                        
  1625                        MODE_SIZE:
  1626 00:07B8: xx xx                        dw      Size3                   ; a
  1627 00:07BA: xx xx                        dw      Size1                   ; A
  1628 00:07BC: xx xx                        dw      Size3                   ; a,x
  1629 00:07BE: xx xx                        dw      Size3                   ; a,y
  1630 00:07C0: xx xx                        dw      Size4                   ; al
  1631 00:07C2: xx xx                        dw      Size4                   ; al,x
  1632 00:07C4: xx xx                        dw      Size3                   ; (a)
  1633 00:07C6: xx xx                        dw      Size3                   ; (a,x)
  1634 00:07C8: xx xx                        dw      Size2                   ; d
  1635 00:07CA: xx xx                        dw      Size2                   ; d,s
  1636 00:07CC: xx xx                        dw      Size2                   ; d,x
  1637 00:07CE: xx xx                        dw      Size2                   ; d,y
  1638 00:07D0: xx xx                        dw      Size2                   ; (d)
  1639 00:07D2: xx xx                        dw      Size2                   ; [d]
  1640 00:07D4: xx xx                        dw      Size2                   ; (d,s),y
  1641 00:07D6: xx xx                        dw      Size2                   ; (d,x)
  1642 00:07D8: xx xx                        dw      Size2                   ; (d),y
  1643 00:07DA: xx xx                        dw      Size2                   ; [d],y
  1644 00:07DC: xx xx                        dw      Size1                   ;
  1645 00:07DE: xx xx                        dw      Size2                   ; r
  1646 00:07E0: xx xx                        dw      Size3                   ; rl
  1647 00:07E2: xx xx                        dw      Size3                   ; xyc
  1648 00:07E4: xx xx                        dw      TestM                   ; # (A & M)
  1649 00:07E6: xx xx                        dw      Size2                   ; # (BRK/COP/WDM)
  1650 00:07E8: xx xx                        dw      TestX                   ; # (X or Y)
  1651                        
  1652                        TestM
  1653 00:07EA: A9 20                        lda     #M_FLAG                 ; Is M bit set?
  1654 00:07EC: 25 20                        and     FLAGS
  1655 00:07EE: F0 10                        beq     Size3                   ; No, word
  1656 00:07F0: 80 0B                        bra     Size2                   ; else byte
  1657                        
  1658                        TestX
  Fri Apr 21 2023  0:45                                                                                                    Page 32


  1659 00:07F2: A9 10                        lda     #X_FLAG                 ; Is X bit set?
  1660 00:07F4: 25 20                        and     FLAGS
  1661 00:07F6: F0 08                        beq     Size3                   ; No, word
  1662 00:07F8: 80 03                        bra     Size2                   ; else byte
  1663                        
  1664 00:07FA: A9 01        Size1:          lda     #1
  1665 00:07FC: 60                           rts
  1666 00:07FD: A9 02        Size2:          lda     #2
  1667 00:07FF: 60                           rts
  1668 00:0800: A9 03        Size3           lda     #3
  1669 00:0802: 60                           rts
  1670 00:0803: A9 04        Size4:          lda     #4
  1671 00:0805: 60                           rts
  1672                        
  1673                        OPCODES:
  1674 00:0806: 16 52 28 52                  db      OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
  1675 00:080A: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1676 00:080E: 62 52 04 5E                  db      OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1677 00:0812: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1678 00:0816: 12 52 52 52                  db      OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
  1679 00:081A: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1680 00:081E: 1E 52 36 9A                  db      OP_CLC,OP_ORA,OP_INC,OP_TCS
  1681 00:0822: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1682 00:0826: 42 02 40 02                  db      OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
  1683 00:082A: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1684 00:082E: 6E 02 76 6C                  db      OP_PLP,OP_AND,OP_ROL,OP_PLD
  1685 00:0832: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1686 00:0836: 0E 02 02 02                  db      OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
  1687 00:083A: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1688 00:083E: 82 02 2E A2                  db      OP_SEC,OP_AND,OP_DEC,OP_TSC
  1689 00:0842: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1690 00:0846: 7A 34 B2 34                  db      OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
  1691 00:084A: 4E 34 4A 34                  db      OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1692 00:084E: 5A 34 4A 60                  db      OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1693 00:0852: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1694 00:0856: 1A 34 34 34                  db      OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
  1695 00:085A: 4C 34 4A 34                  db      OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1696 00:085E: 22 34 66 98                  db      OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1697 00:0862: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1698 00:0866: 7E 00 58 00                  db      OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
  1699 00:086A: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1700 00:086E: 68 00 78 7C                  db      OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1701 00:0872: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1702 00:0876: 1C 00 00 00                  db      OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
  1703 00:087A: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1704 00:087E: 86 00 72 9C                  db      OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1705 00:0882: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1706 00:0886: 14 8A 18 8A                  db      OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
  1707 00:088A: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1708 00:088E: 32 0C A6 5C                  db      OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1709 00:0892: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1710 00:0896: 06 8A 8A 8A                  db      OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
  1711 00:089A: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1712 00:089E: AC 8A A8 AA                  db      OP_TYA,OP_STA,OP_TXS,OP_TXY
  1713 00:08A2: 92 8A 92 8A                  db      OP_STZ,OP_STA,OP_STZ,OP_STA
  1714 00:08A6: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
  1715 00:08AA: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1716 00:08AE: 96 44 94 6A                  db      OP_TAY,OP_LDA,OP_TAX,OP_PLB
  Fri Apr 21 2023  0:45                                                                                                    Page 33


  1717 00:08B2: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1718 00:08B6: 08 44 44 44                  db      OP_BCS,OP_LDA,OP_LDA,OP_LDA     ; B0
  1719 00:08BA: 44 48 46 44                  db      OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1720 00:08BE: 24 44 A4 AE                  db      OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1721 00:08C2: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1722 00:08C6: 2C 26 74 26                  db      OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
  1723 00:08CA: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1724 00:08CE: 3A 26 30 B0                  db      OP_INY,OP_CMP,OP_DEX,OP_WAI
  1725 00:08D2: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1726 00:08D6: 10 26 26 26                  db      OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
  1727 00:08DA: 56 26 2E 26                  db      OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1728 00:08DE: 20 26 64 8C                  db      OP_CLD,OP_CMP,OP_PHX,OP_STP
  1729 00:08E2: 3C 26 2E 26                  db      OP_JML,OP_CMP,OP_DEC,OP_CMP
  1730 00:08E6: 2A 80 88 80                  db      OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
  1731 00:08EA: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1732 00:08EE: 38 80 50 B4                  db      OP_INX,OP_SBC,OP_NOP,OP_XBA
  1733 00:08F2: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1734 00:08F6: 0A 80 80 80                  db      OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
  1735 00:08FA: 54 80 36 80                  db      OP_PEA,OP_SBC,OP_INC,OP_SBC
  1736 00:08FE: 84 80 70 B6                  db      OP_SED,OP_SBC,OP_PLX,OP_XCE
  1737 00:0902: 42 80 36 80                  db      OP_JSR,OP_SBC,OP_INC,OP_SBC
  1738                        
  1739                        MODES:
  1740 00:0906: 2E 1E 2E 12                  db      MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
  1741 00:090A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1742 00:090E: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1743 00:0912: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1744 00:0916: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
  1745 00:091A: 10 14 14 22                  db      MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1746 00:091E: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1747 00:0922: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1748 00:0926: 00 1E 08 12                  db      MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
  1749 00:092A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1750 00:092E: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1751 00:0932: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1752 00:0936: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
  1753 00:093A: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1754 00:093E: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1755 00:0942: 04 04 04 0A                  db      MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1756 00:0946: 24 1E 2E 12                  db      MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
  1757 00:094A: 2A 10 10 1A                  db      MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1758 00:094E: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1759 00:0952: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1760 00:0956: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
  1761 00:095A: 2A 14 14 22                  db      MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1762 00:095E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1763 00:0962: 08 04 04 0A                  db      MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1764 00:0966: 24 1E 24 12                  db      MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
  1765 00:096A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1766 00:096E: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1767 00:0972: 0C 00 00 08                  db      MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1768 00:0976: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
  1769 00:097A: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1770 00:097E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1771 00:0982: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1772 00:0986: 26 1E 28 12                  db      MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
  1773 00:098A: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1774 00:098E: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  Fri Apr 21 2023  0:45                                                                                                    Page 34


  1775 00:0992: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1776 00:0996: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
  1777 00:099A: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1778 00:099E: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1779 00:09A2: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1780 00:09A6: 30 1E 30 12                  db      MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
  1781 00:09AA: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1782 00:09AE: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1783 00:09B2: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1784 00:09B6: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
  1785 00:09BA: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1786 00:09BE: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1787 00:09C2: 04 04 06 0A                  db      MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1788 00:09C6: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
  1789 00:09CA: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1790 00:09CE: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1791 00:09D2: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1792 00:09D6: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
  1793 00:09DA: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1794 00:09DE: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1795 00:09E2: 0C 04 04 0A                  db      MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1796 00:09E6: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
  1797 00:09EA: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1798 00:09EE: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1799 00:09F2: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1800 00:09F6: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
  1801 00:09FA: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1802 00:09FE: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1803 00:0A02: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1804                        
  1805                        MNEMONICS:
  1806                                        MNEM    'A','D','C'
+ 1806 00:0A06: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1807                                        MNEM    'A','N','D'
+ 1807 00:0A08: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1808                                        MNEM    'A','S','L'
+ 1808 00:0A0A: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1809                                        MNEM    'B','C','C'
+ 1809 00:0A0C: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1810                                        MNEM    'B','C','S'
+ 1810 00:0A0E: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1811                                        MNEM    'B','E','Q'
+ 1811 00:0A10: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1812                                        MNEM    'B','I','T'
+ 1812 00:0A12: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1813                                        MNEM    'B','M','I'
+ 1813 00:0A14: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1814                                        MNEM    'B','N','E'
+ 1814 00:0A16: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1815                                        MNEM    'B','P','L'
+ 1815 00:0A18: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1816                                        MNEM    'B','R','A'
+ 1816 00:0A1A: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1817                                        MNEM    'B','R','K'
+ 1817 00:0A1C: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1818                                        MNEM    'B','R','L'
+ 1818 00:0A1E: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1819                                        MNEM    'B','V','C'
  Fri Apr 21 2023  0:45                                                                                                    Page 35


+ 1819 00:0A20: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1820                                        MNEM    'B','V','S'
+ 1820 00:0A22: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1821                                        MNEM    'C','L','C'
+ 1821 00:0A24: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1822                                        MNEM    'C','L','D'
+ 1822 00:0A26: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1823                                        MNEM    'C','L','I'
+ 1823 00:0A28: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1824                                        MNEM    'C','L','V'
+ 1824 00:0A2A: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1825                                        MNEM    'C','M','P'
+ 1825 00:0A2C: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1826                                        MNEM    'C','O','P'
+ 1826 00:0A2E: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1827                                        MNEM    'C','P','X'
+ 1827 00:0A30: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1828                                        MNEM    'C','P','Y'
+ 1828 00:0A32: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1829                                        MNEM    'D','E','C'
+ 1829 00:0A34: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1830                                        MNEM    'D','E','X'
+ 1830 00:0A36: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1831                                        MNEM    'D','E','Y'
+ 1831 00:0A38: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1832                                        MNEM    'E','O','R'
+ 1832 00:0A3A: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1833                                        MNEM    'I','N','C'
+ 1833 00:0A3C: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1834                                        MNEM    'I','N','X'
+ 1834 00:0A3E: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1835                                        MNEM    'I','N','Y'
+ 1835 00:0A40: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1836                                        MNEM    'J','M','L'
+ 1836 00:0A42: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1837                                        MNEM    'J','M','P'
+ 1837 00:0A44: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1838                                        MNEM    'J','S','L'
+ 1838 00:0A46: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1839                                        MNEM    'J','S','R'
+ 1839 00:0A48: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1840                                        MNEM    'L','D','A'
+ 1840 00:0A4A: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1841                                        MNEM    'L','D','X'
+ 1841 00:0A4C: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1842                                        MNEM    'L','D','Y'
+ 1842 00:0A4E: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1843                                        MNEM    'L','S','R'
+ 1843 00:0A50: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1844                                        MNEM    'M','V','N'
+ 1844 00:0A52: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1845                                        MNEM    'M','V','P'
+ 1845 00:0A54: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1846                                        MNEM    'N','O','P'
+ 1846 00:0A56: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1847                                        MNEM    'O','R','A'
+ 1847 00:0A58: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1848                                        MNEM    'P','E','A'
  Fri Apr 21 2023  0:45                                                                                                    Page 36


+ 1848 00:0A5A: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1849                                        MNEM    'P','E','I'
+ 1849 00:0A5C: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1850                                        MNEM    'P','E','R'
+ 1850 00:0A5E: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1851                                        MNEM    'P','H','A'
+ 1851 00:0A60: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1852                                        MNEM    'P','H','B'
+ 1852 00:0A62: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1853                                        MNEM    'P','H','D'
+ 1853 00:0A64: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1854                                        MNEM    'P','H','K'
+ 1854 00:0A66: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1855                                        MNEM    'P','H','P'
+ 1855 00:0A68: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1856                                        MNEM    'P','H','X'
+ 1856 00:0A6A: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1857                                        MNEM    'P','H','Y'
+ 1857 00:0A6C: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1858                                        MNEM    'P','L','A'
+ 1858 00:0A6E: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1859                                        MNEM    'P','L','B'
+ 1859 00:0A70: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1860                                        MNEM    'P','L','D'
+ 1860 00:0A72: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1861                                        MNEM    'P','L','P'
+ 1861 00:0A74: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1862                                        MNEM    'P','L','X'
+ 1862 00:0A76: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1863                                        MNEM    'P','L','Y'
+ 1863 00:0A78: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1864                                        MNEM    'R','E','P'
+ 1864 00:0A7A: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1865                                        MNEM    'R','O','L'
+ 1865 00:0A7C: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1866                                        MNEM    'R','O','R'
+ 1866 00:0A7E: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1867                                        MNEM    'R','T','I'
+ 1867 00:0A80: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1868                                        MNEM    'R','T','L'
+ 1868 00:0A82: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1869                                        MNEM    'R','T','S'
+ 1869 00:0A84: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1870                                        MNEM    'S','B','C'
+ 1870 00:0A86: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1871                                        MNEM    'S','E','C'
+ 1871 00:0A88: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1872                                        MNEM    'S','E','D'
+ 1872 00:0A8A: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1873                                        MNEM    'S','E','I'
+ 1873 00:0A8C: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1874                                        MNEM    'S','E','P'
+ 1874 00:0A8E: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1875                                        MNEM    'S','T','A'
+ 1875 00:0A90: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1876                                        MNEM    'S','T','P'
+ 1876 00:0A92: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1877                                        MNEM    'S','T','X'
  Fri Apr 21 2023  0:45                                                                                                    Page 37


+ 1877 00:0A94: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1878                                        MNEM    'S','T','Y'
+ 1878 00:0A96: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1879                                        MNEM    'S','T','Z'
+ 1879 00:0A98: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1880                                        MNEM    'T','A','X'
+ 1880 00:0A9A: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1881                                        MNEM    'T','A','Y'
+ 1881 00:0A9C: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1882                                        MNEM    'T','C','D'
+ 1882 00:0A9E: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1883                                        MNEM    'T','C','S'
+ 1883 00:0AA0: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1884                                        MNEM    'T','D','C'
+ 1884 00:0AA2: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1885                                        MNEM    'T','R','B'
+ 1885 00:0AA4: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1886                                        MNEM    'T','S','B'
+ 1886 00:0AA6: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1887                                        MNEM    'T','S','C'
+ 1887 00:0AA8: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1888                                        MNEM    'T','S','X'
+ 1888 00:0AAA: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1889                                        MNEM    'T','X','A'
+ 1889 00:0AAC: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1890                                        MNEM    'T','X','S'
+ 1890 00:0AAE: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1891                                        MNEM    'T','X','Y'
+ 1891 00:0AB0: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1892                                        MNEM    'T','Y','A'
+ 1892 00:0AB2: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1893                                        MNEM    'T','Y','X'
+ 1893 00:0AB4: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1894                                        MNEM    'W','A','I'
+ 1894 00:0AB6: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1895                                        MNEM    'W','D','M'
+ 1895 00:0AB8: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1896                                        MNEM    'X','B','A'
+ 1896 00:0ABA: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1897                                        MNEM    'X','C','E'
+ 1897 00:0ABC: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1898                        
  1899                        ;===============================================================================
  1900                        ; String Literals
  1901                        ;-------------------------------------------------------------------------------
  1902                        
  1903 00:0ABE: 0D 0A        TITLE           db      CR,LF
  1904                                        ifdef   W65C816SXB
  1905 00:0AC0: 57 36 35 43                  db      "W65C816SXB"
       00:0AC4: 38 31 36 53 
       00:0AC8: 58 42 
  1906                                        endif
  1907                                        ifdef   W65C265SXB
  1908                                        db      "W65C265SXB"
  1909                                        endif
  1910 00:0ACA: 2D 48 61 63                  db      "-Hacker (Enhanced) [19.00]",0
       00:0ACE: 6B 65 72 20 
       00:0AD2: 28 45 6E 68 
  Fri Apr 21 2023  0:45                                                                                                    Page 38


       00:0AD6: 61 6E 63 65 
       00:0ADA: 64 29 20 5B 
       00:0ADE: 31 39 2E 30 
       00:0AE2: 30 5D 00 
  1911                        
  1912 00:0AE5: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:0AE9: 72 6F 72 20 
       00:0AED: 2D 20 54 79 
       00:0AF1: 70 65 20 3F 
       00:0AF5: 20 66 6F 72 
       00:0AF9: 20 68 65 6C 
       00:0AFD: 70 00 
  1913                        
  1914 00:0AFF: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:0B03: 61 73 65 20 
       00:0B07: 66 61 69 6C 
       00:0B0B: 65 64 00 
  1915 00:0B0E: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:0B12: 69 74 65 20 
       00:0B16: 66 61 69 6C 
       00:0B1A: 65 64 00 
  1916 00:0B1D: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0B21: 43 20 52 4F 
       00:0B25: 4D 20 42 61 
       00:0B29: 6E 6B 20 53 
       00:0B2D: 65 6C 65 63 
       00:0B31: 74 65 64 00 
  1917 00:0B35: 0D 0A 49 6E  INVALID_S19     db      CR,LF,"Invalid S19 record",0
       00:0B39: 76 61 6C 69 
       00:0B3D: 64 20 53 31 
       00:0B41: 39 20 72 65 
       00:0B45: 63 6F 72 64 
       00:0B49: 00 
  1918                        
  1919 00:0B4A: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:0B4E: 69 74 69 6E 
       00:0B52: 67 20 66 6F 
       00:0B56: 72 20 58 4D 
       00:0B5A: 4F 44 45 4D 
       00:0B5E: 20 74 72 61 
       00:0B62: 6E 73 66 65 
       00:0B66: 72 20 74 6F 
       00:0B6A: 20 73 74 61 
       00:0B6E: 72 74 00 
  1920 00:0B71: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:0B75: 6D 65 6F 75 
       00:0B79: 74 00 
  1921                        
  1922 00:0B7B: 0D 0A 42 20  HELP            db      CR,LF,"B bb            - Set memory bank"
       00:0B7F: 62 62 20 20 
       00:0B83: 20 20 20 20 
       00:0B87: 20 20 20 20 
       00:0B8B: 20 20 2D 20 
       00:0B8F: 53 65 74 20 
       00:0B93: 6D 65 6D 6F 
       00:0B97: 72 79 20 62 
       00:0B9B: 61 6E 6B 
  1923 00:0B9E: 0D 0A 44 20                  db      CR,LF,"D ssss eeee     - Disassemble memory in current bank"
  Fri Apr 21 2023  0:45                                                                                                    Page 39


       00:0BA2: 73 73 73 73 
       00:0BA6: 20 65 65 65 
       00:0BAA: 65 20 20 20 
       00:0BAE: 20 20 2D 20 
       00:0BB2: 44 69 73 61 
       00:0BB6: 73 73 65 6D 
       00:0BBA: 62 6C 65 20 
       00:0BBE: 6D 65 6D 6F 
       00:0BC2: 72 79 20 69 
       00:0BC6: 6E 20 63 75 
       00:0BCA: 72 72 65 6E 
       00:0BCE: 74 20 62 61 
       00:0BD2: 6E 6B 
  1924 00:0BD4: 0D 0A 45 20                  db      CR,LF,"E [ssss] [eeee] - Erase ROM area"
       00:0BD8: 5B 73 73 73 
       00:0BDC: 73 5D 20 5B 
       00:0BE0: 65 65 65 65 
       00:0BE4: 5D 20 2D 20 
       00:0BE8: 45 72 61 73 
       00:0BEC: 65 20 52 4F 
       00:0BF0: 4D 20 61 72 
       00:0BF4: 65 61 
  1925                                        ifdef   W65C265SXB
  1926                                        db      CR,LF,"F 0-1           - Disable/Enable WDC ROM"
  1927                                        db      CR,LF,"H               - Hunt for RAM"
  1928                                        endif
  1929 00:0BF6: 0D 0A 47 20                  db      CR,LF,"G [xxxx]        - Run from bb:xxxx or invoke reset vector"
       00:0BFA: 5B 78 78 78 
       00:0BFE: 78 5D 20 20 
       00:0C02: 20 20 20 20 
       00:0C06: 20 20 2D 20 
       00:0C0A: 52 75 6E 20 
       00:0C0E: 66 72 6F 6D 
       00:0C12: 20 62 62 3A 
       00:0C16: 78 78 78 78 
       00:0C1A: 20 6F 72 20 
       00:0C1E: 69 6E 76 6F 
       00:0C22: 6B 65 20 72 
       00:0C26: 65 73 65 74 
       00:0C2A: 20 76 65 63 
       00:0C2E: 74 6F 72 
  1930 00:0C31: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee     - Display memory in current bank"
       00:0C35: 73 73 73 73 
       00:0C39: 20 65 65 65 
       00:0C3D: 65 20 20 20 
       00:0C41: 20 20 2D 20 
       00:0C45: 44 69 73 70 
       00:0C49: 6C 61 79 20 
       00:0C4D: 6D 65 6D 6F 
       00:0C51: 72 79 20 69 
       00:0C55: 6E 20 63 75 
       00:0C59: 72 72 65 6E 
       00:0C5D: 74 20 62 61 
       00:0C61: 6E 6B 
  1931 00:0C63: 0D 0A 52 20                  db      CR,LF,"R 0-3           - Select ROM bank 0-3"
       00:0C67: 30 2D 33 20 
       00:0C6B: 20 20 20 20 
       00:0C6F: 20 20 20 20 
  Fri Apr 21 2023  0:45                                                                                                    Page 40


       00:0C73: 20 20 2D 20 
       00:0C77: 53 65 6C 65 
       00:0C7B: 63 74 20 52 
       00:0C7F: 4F 4D 20 62 
       00:0C83: 61 6E 6B 20 
       00:0C87: 30 2D 33 
  1932 00:0C8A: 0D 0A 53 2E                  db      CR,LF,"S...            - Process S19 record"
       00:0C8E: 2E 2E 20 20 
       00:0C92: 20 20 20 20 
       00:0C96: 20 20 20 20 
       00:0C9A: 20 20 2D 20 
       00:0C9E: 50 72 6F 63 
       00:0CA2: 65 73 73 20 
       00:0CA6: 53 31 39 20 
       00:0CAA: 72 65 63 6F 
       00:0CAE: 72 64 
  1933 00:0CB0: 0D 0A 57 20                  db      CR,LF,"W xxxx yy       - Set memory at xxxx to yy"
       00:0CB4: 78 78 78 78 
       00:0CB8: 20 79 79 20 
       00:0CBC: 20 20 20 20 
       00:0CC0: 20 20 2D 20 
       00:0CC4: 53 65 74 20 
       00:0CC8: 6D 65 6D 6F 
       00:0CCC: 72 79 20 61 
       00:0CD0: 74 20 78 78 
       00:0CD4: 78 78 20 74 
       00:0CD8: 6F 20 79 79 
  1934 00:0CDC: 0D 0A 58 20                  db      CR,LF,"X xxxx          - XMODEM receive to bb:xxxx"
       00:0CE0: 78 78 78 78 
       00:0CE4: 20 20 20 20 
       00:0CE8: 20 20 20 20 
       00:0CEC: 20 20 2D 20 
       00:0CF0: 58 4D 4F 44 
       00:0CF4: 45 4D 20 72 
       00:0CF8: 65 63 65 69 
       00:0CFC: 76 65 20 74 
       00:0D00: 6F 20 62 62 
       00:0D04: 3A 78 78 78 
       00:0D08: 78 
  1935 00:0D09: 00                           db      0
  1936                        
  1937                                        end


      Lines assembled: 2163
      Errors: 0
